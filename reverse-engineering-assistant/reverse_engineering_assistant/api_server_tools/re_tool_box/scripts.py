from typing import Dict, List, Union, Optional
import logging

import grpc

from reverse_engineering_assistant.assistant import AssistantProject, register_tool
from reverse_engineering_assistant.api_server_tools import RevaRemoteTool
from reverse_engineering_assistant.reva_exceptions import RevaToolException
from reverse_engineering_assistant.model import RevaModel

from reverse_engineering_assistant.protocol import RevaScript_pb2, RevaScript_pb2_grpc

class RevaScripts(RevaRemoteTool):
    """
    A tool for creating and running scripts using the Ghidra script manager
    """
    logger = logging.getLogger("reverse_engineering_assistant.RevaScripts")

    def __init___(self, project: AssistantProject, llm: RevaModel) -> None:
        super().__init__(project, llm)
        self.description = "Used for creating and running scripts using the Ghidra script manager"

        self.tool_functions = [
            self.run_python2,
        ]

    def run_python2(self, name: str, description: str, script: str) -> str:
        """
        Run a python2 script in the Ghidra script manager.
        """
        stub = RevaScript_pb2_grpc.RevaScriptServiceStub(self.channel)
        request = RevaScript_pb2.RevaScriptRequest()
        request.name = name
        request.description = description
        request.type = RevaScript_pb2.GHIDRA_PYTHON
        request.category = "ReVa Autogenerated" # This is not used
        request.content = script
        try:
            response: RevaScript_pb2.RevaScriptResponse = stub.run_script(request)
        except grpc.RpcError as e:
            raise RevaToolException(f"Failed to run script: {e}")

        return response.output